// This file is generated by KDAB's kdwsdl2cpp from mantisconnect.php?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/
#ifndef MANTISCONNECT_H
#define MANTISCONNECT_H

#include <QtCore/QList>
#include <QtCore/QSharedData>
#include <QtCore/QString>
#include <KDSoapClient/KDDateTime.h>
#include <QtCore/QStringList>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>
#include <QtCore/QByteArray>

class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
class MantisConnect;
QT_BEGIN_NAMESPACE
class QString;
QT_END_NAMESPACE
class TNS__AccountData;
class TNS__AccountDataArray;
class TNS__AttachmentData;
class TNS__AttachmentDataArray;
class TNS__CustomFieldDefinitionData;
class TNS__CustomFieldLinkForProjectData;
class TNS__CustomFieldValueForIssueData;
class TNS__CustomFieldValueForIssueDataArray;
class TNS__FilterData;
class TNS__IssueData;
class TNS__IssueHeaderData;
class TNS__IssueNoteData;
class TNS__IssueNoteDataArray;
class TNS__ObjectRef;
class TNS__ProjectAttachmentData;
class TNS__ProjectData;
class TNS__ProjectDataArray;
class TNS__ProjectVersionData;
class TNS__RelationshipData;
class TNS__RelationshipDataArray;

class TNS__ProjectVersionDataArray
{
public:
    void setItems( const QList< TNS__ProjectVersionData >& _items );
    QList< TNS__ProjectVersionData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ProjectVersionDataArray();
    ~TNS__ProjectVersionDataArray();

public:
    TNS__ProjectVersionDataArray( const TNS__ProjectVersionDataArray& );
    TNS__ProjectVersionDataArray &operator=( const TNS__ProjectVersionDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CustomFieldValueForIssueData
{
public:
    void setField( const TNS__ObjectRef& _field );
    TNS__ObjectRef field() const;
    void setValue( const QString& _value );
    QString value() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CustomFieldValueForIssueData();
    ~TNS__CustomFieldValueForIssueData();

public:
    TNS__CustomFieldValueForIssueData( const TNS__CustomFieldValueForIssueData& );
    TNS__CustomFieldValueForIssueData &operator=( const TNS__CustomFieldValueForIssueData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CustomFieldLinkForProjectDataArray
{
public:
    void setItems( const QList< TNS__CustomFieldLinkForProjectData >& _items );
    QList< TNS__CustomFieldLinkForProjectData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CustomFieldLinkForProjectDataArray();
    ~TNS__CustomFieldLinkForProjectDataArray();

public:
    TNS__CustomFieldLinkForProjectDataArray( const TNS__CustomFieldLinkForProjectDataArray& );
    TNS__CustomFieldLinkForProjectDataArray &operator=( const TNS__CustomFieldLinkForProjectDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__IssueHeaderData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setView_state( qint64 _view_state );
    qint64 view_state() const;
    void setLast_updated( const KDDateTime& _last_updated );
    KDDateTime last_updated() const;
    void setProject( qint64 _project );
    qint64 project() const;
    void setCategory( const QString& _category );
    QString category() const;
    void setPriority( qint64 _priority );
    qint64 priority() const;
    void setSeverity( qint64 _severity );
    qint64 severity() const;
    void setStatus( qint64 _status );
    qint64 status() const;
    void setReporter( qint64 _reporter );
    qint64 reporter() const;
    void setSummary( const QString& _summary );
    QString summary() const;
    void setHandler( qint64 _handler );
    qint64 handler() const;
    void setResolution( qint64 _resolution );
    qint64 resolution() const;
    void setAttachments_count( qint64 _attachments_count );
    qint64 attachments_count() const;
    void setNotes_count( qint64 _notes_count );
    qint64 notes_count() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__IssueHeaderData();
    ~TNS__IssueHeaderData();

public:
    TNS__IssueHeaderData( const TNS__IssueHeaderData& );
    TNS__IssueHeaderData &operator=( const TNS__IssueHeaderData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__IssueNoteDataArray
{
public:
    void setItems( const QList< TNS__IssueNoteData >& _items );
    QList< TNS__IssueNoteData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__IssueNoteDataArray();
    ~TNS__IssueNoteDataArray();

public:
    TNS__IssueNoteDataArray( const TNS__IssueNoteDataArray& );
    TNS__IssueNoteDataArray &operator=( const TNS__IssueNoteDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CustomFieldDefinitionDataArray
{
public:
    void setItems( const QList< TNS__CustomFieldDefinitionData >& _items );
    QList< TNS__CustomFieldDefinitionData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CustomFieldDefinitionDataArray();
    ~TNS__CustomFieldDefinitionDataArray();

public:
    TNS__CustomFieldDefinitionDataArray( const TNS__CustomFieldDefinitionDataArray& );
    TNS__CustomFieldDefinitionDataArray &operator=( const TNS__CustomFieldDefinitionDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CustomFieldDefinitionData
{
public:
    void setField( const TNS__ObjectRef& _field );
    TNS__ObjectRef field() const;
    void setType( qint64 _type );
    qint64 type() const;
    void setPossible_values( const QString& _possible_values );
    QString possible_values() const;
    void setDefault_value( const QString& _default_value );
    QString default_value() const;
    void setValid_regexp( const QString& _valid_regexp );
    QString valid_regexp() const;
    void setAccess_level_r( qint64 _access_level_r );
    qint64 access_level_r() const;
    void setAccess_level_rw( qint64 _access_level_rw );
    qint64 access_level_rw() const;
    void setLength_min( qint64 _length_min );
    qint64 length_min() const;
    void setLength_max( qint64 _length_max );
    qint64 length_max() const;
    void setAdvanced( bool _advanced );
    bool advanced() const;
    void setDisplay_report( bool _display_report );
    bool display_report() const;
    void setDisplay_update( bool _display_update );
    bool display_update() const;
    void setDisplay_resolved( bool _display_resolved );
    bool display_resolved() const;
    void setDisplay_closed( bool _display_closed );
    bool display_closed() const;
    void setRequire_report( bool _require_report );
    bool require_report() const;
    void setRequire_update( bool _require_update );
    bool require_update() const;
    void setRequire_resolved( bool _require_resolved );
    bool require_resolved() const;
    void setRequire_closed( bool _require_closed );
    bool require_closed() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CustomFieldDefinitionData();
    ~TNS__CustomFieldDefinitionData();

public:
    TNS__CustomFieldDefinitionData( const TNS__CustomFieldDefinitionData& );
    TNS__CustomFieldDefinitionData &operator=( const TNS__CustomFieldDefinitionData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__RelationshipData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setType( const TNS__ObjectRef& _type );
    TNS__ObjectRef type() const;
    void setTarget_id( qint64 _target_id );
    qint64 target_id() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__RelationshipData();
    ~TNS__RelationshipData();

public:
    TNS__RelationshipData( const TNS__RelationshipData& );
    TNS__RelationshipData &operator=( const TNS__RelationshipData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__AccountData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setName( const QString& _name );
    QString name() const;
    void setReal_name( const QString& _real_name );
    QString real_name() const;
    void setEmail( const QString& _email );
    QString email() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AccountData();
    ~TNS__AccountData();

public:
    TNS__AccountData( const TNS__AccountData& );
    TNS__AccountData &operator=( const TNS__AccountData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__StringArray
{
public:
    void setItems( const QStringList& _items );
    QStringList items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__StringArray();
    ~TNS__StringArray();

public:
    TNS__StringArray( const TNS__StringArray& );
    TNS__StringArray &operator=( const TNS__StringArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__IssueNoteData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setReporter( const TNS__AccountData& _reporter );
    TNS__AccountData reporter() const;
    void setText( const QString& _text );
    QString text() const;
    void setView_state( const TNS__ObjectRef& _view_state );
    TNS__ObjectRef view_state() const;
    void setDate_submitted( const KDDateTime& _date_submitted );
    KDDateTime date_submitted() const;
    void setLast_modified( const KDDateTime& _last_modified );
    KDDateTime last_modified() const;
    void setTime_tracking( qint64 _time_tracking );
    qint64 time_tracking() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__IssueNoteData();
    ~TNS__IssueNoteData();

public:
    TNS__IssueNoteData( const TNS__IssueNoteData& );
    TNS__IssueNoteData &operator=( const TNS__IssueNoteData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ProjectAttachmentData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setFilename( const QString& _filename );
    QString filename() const;
    void setTitle( const QString& _title );
    QString title() const;
    void setDescription( const QString& _description );
    QString description() const;
    void setSize( qint64 _size );
    qint64 size() const;
    void setContent_type( const QString& _content_type );
    QString content_type() const;
    void setDate_submitted( const KDDateTime& _date_submitted );
    KDDateTime date_submitted() const;
    void setDownload_url( const QString& _download_url );
    QString download_url() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ProjectAttachmentData();
    ~TNS__ProjectAttachmentData();

public:
    TNS__ProjectAttachmentData( const TNS__ProjectAttachmentData& );
    TNS__ProjectAttachmentData &operator=( const TNS__ProjectAttachmentData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__IssueData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setView_state( const TNS__ObjectRef& _view_state );
    TNS__ObjectRef view_state() const;
    void setLast_updated( const KDDateTime& _last_updated );
    KDDateTime last_updated() const;
    void setProject( const TNS__ObjectRef& _project );
    TNS__ObjectRef project() const;
    void setCategory( const QString& _category );
    QString category() const;
    void setPriority( const TNS__ObjectRef& _priority );
    TNS__ObjectRef priority() const;
    void setSeverity( const TNS__ObjectRef& _severity );
    TNS__ObjectRef severity() const;
    void setStatus( const TNS__ObjectRef& _status );
    TNS__ObjectRef status() const;
    void setReporter( const TNS__AccountData& _reporter );
    TNS__AccountData reporter() const;
    void setSummary( const QString& _summary );
    QString summary() const;
    void setVersion( const QString& _version );
    QString version() const;
    void setBuild( const QString& _build );
    QString build() const;
    void setPlatform( const QString& _platform );
    QString platform() const;
    void setOs( const QString& _os );
    QString os() const;
    void setOs_build( const QString& _os_build );
    QString os_build() const;
    void setReproducibility( const TNS__ObjectRef& _reproducibility );
    TNS__ObjectRef reproducibility() const;
    void setDate_submitted( const KDDateTime& _date_submitted );
    KDDateTime date_submitted() const;
    void setSponsorship_total( qint64 _sponsorship_total );
    qint64 sponsorship_total() const;
    void setHandler( const TNS__AccountData& _handler );
    TNS__AccountData handler() const;
    void setProjection( const TNS__ObjectRef& _projection );
    TNS__ObjectRef projection() const;
    void setEta( const TNS__ObjectRef& _eta );
    TNS__ObjectRef eta() const;
    void setResolution( const TNS__ObjectRef& _resolution );
    TNS__ObjectRef resolution() const;
    void setFixed_in_version( const QString& _fixed_in_version );
    QString fixed_in_version() const;
    void setTarget_version( const QString& _target_version );
    QString target_version() const;
    void setDescription( const QString& _description );
    QString description() const;
    void setSteps_to_reproduce( const QString& _steps_to_reproduce );
    QString steps_to_reproduce() const;
    void setAdditional_information( const QString& _additional_information );
    QString additional_information() const;
    void setAttachments( const TNS__AttachmentDataArray& _attachments );
    TNS__AttachmentDataArray attachments() const;
    void setRelationships( const TNS__RelationshipDataArray& _relationships );
    TNS__RelationshipDataArray relationships() const;
    void setNotes( const TNS__IssueNoteDataArray& _notes );
    TNS__IssueNoteDataArray notes() const;
    void setCustom_fields( const TNS__CustomFieldValueForIssueDataArray& _custom_fields );
    TNS__CustomFieldValueForIssueDataArray custom_fields() const;
    void setDue_date( const KDDateTime& _due_date );
    KDDateTime due_date() const;
    void setMonitors( const TNS__AccountDataArray& _monitors );
    TNS__AccountDataArray monitors() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__IssueData();
    ~TNS__IssueData();

public:
    TNS__IssueData( const TNS__IssueData& );
    TNS__IssueData &operator=( const TNS__IssueData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__RelationshipDataArray
{
public:
    void setItems( const QList< TNS__RelationshipData >& _items );
    QList< TNS__RelationshipData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__RelationshipDataArray();
    ~TNS__RelationshipDataArray();

public:
    TNS__RelationshipDataArray( const TNS__RelationshipDataArray& );
    TNS__RelationshipDataArray &operator=( const TNS__RelationshipDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FilterDataArray
{
public:
    void setItems( const QList< TNS__FilterData >& _items );
    QList< TNS__FilterData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FilterDataArray();
    ~TNS__FilterDataArray();

public:
    TNS__FilterDataArray( const TNS__FilterDataArray& );
    TNS__FilterDataArray &operator=( const TNS__FilterDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ProjectVersionData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setName( const QString& _name );
    QString name() const;
    void setProject_id( qint64 _project_id );
    qint64 project_id() const;
    void setDate_order( const KDDateTime& _date_order );
    KDDateTime date_order() const;
    void setDescription( const QString& _description );
    QString description() const;
    void setReleased( bool _released );
    bool released() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ProjectVersionData();
    ~TNS__ProjectVersionData();

public:
    TNS__ProjectVersionData( const TNS__ProjectVersionData& );
    TNS__ProjectVersionData &operator=( const TNS__ProjectVersionData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__IssueHeaderDataArray
{
public:
    void setItems( const QList< TNS__IssueHeaderData >& _items );
    QList< TNS__IssueHeaderData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__IssueHeaderDataArray();
    ~TNS__IssueHeaderDataArray();

public:
    TNS__IssueHeaderDataArray( const TNS__IssueHeaderDataArray& );
    TNS__IssueHeaderDataArray &operator=( const TNS__IssueHeaderDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ProjectData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setName( const QString& _name );
    QString name() const;
    void setStatus( const TNS__ObjectRef& _status );
    TNS__ObjectRef status() const;
    void setEnabled( bool _enabled );
    bool enabled() const;
    void setView_state( const TNS__ObjectRef& _view_state );
    TNS__ObjectRef view_state() const;
    void setAccess_min( const TNS__ObjectRef& _access_min );
    TNS__ObjectRef access_min() const;
    void setFile_path( const QString& _file_path );
    QString file_path() const;
    void setDescription( const QString& _description );
    QString description() const;
    void setSubprojects( const TNS__ProjectDataArray& _subprojects );
    TNS__ProjectDataArray subprojects() const;
    void setInherit_global( bool _inherit_global );
    bool inherit_global() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ProjectData();
    ~TNS__ProjectData();

public:
    TNS__ProjectData( const TNS__ProjectData& );
    TNS__ProjectData &operator=( const TNS__ProjectData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__AccountDataArray
{
public:
    void setItems( const QList< TNS__AccountData >& _items );
    QList< TNS__AccountData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AccountDataArray();
    ~TNS__AccountDataArray();

public:
    TNS__AccountDataArray( const TNS__AccountDataArray& );
    TNS__AccountDataArray &operator=( const TNS__AccountDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ProjectDataArray
{
public:
    void setItems( const QList< TNS__ProjectData >& _items );
    QList< TNS__ProjectData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ProjectDataArray();
    ~TNS__ProjectDataArray();

public:
    TNS__ProjectDataArray( const TNS__ProjectDataArray& );
    TNS__ProjectDataArray &operator=( const TNS__ProjectDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__AttachmentData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setFilename( const QString& _filename );
    QString filename() const;
    void setSize( qint64 _size );
    qint64 size() const;
    void setContent_type( const QString& _content_type );
    QString content_type() const;
    void setDate_submitted( const KDDateTime& _date_submitted );
    KDDateTime date_submitted() const;
    void setDownload_url( const QString& _download_url );
    QString download_url() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AttachmentData();
    ~TNS__AttachmentData();

public:
    TNS__AttachmentData( const TNS__AttachmentData& );
    TNS__AttachmentData &operator=( const TNS__AttachmentData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__AttachmentDataArray
{
public:
    void setItems( const QList< TNS__AttachmentData >& _items );
    QList< TNS__AttachmentData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__AttachmentDataArray();
    ~TNS__AttachmentDataArray();

public:
    TNS__AttachmentDataArray( const TNS__AttachmentDataArray& );
    TNS__AttachmentDataArray &operator=( const TNS__AttachmentDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__FilterData
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setOwner( const TNS__AccountData& _owner );
    TNS__AccountData owner() const;
    void setProject_id( qint64 _project_id );
    qint64 project_id() const;
    void setIs_public( bool _is_public );
    bool is_public() const;
    void setName( const QString& _name );
    QString name() const;
    void setFilter_string( const QString& _filter_string );
    QString filter_string() const;
    void setUrl( const QString& _url );
    QString url() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__FilterData();
    ~TNS__FilterData();

public:
    TNS__FilterData( const TNS__FilterData& );
    TNS__FilterData &operator=( const TNS__FilterData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ObjectRefArray
{
public:
    void setItems( const QList< TNS__ObjectRef >& _items );
    QList< TNS__ObjectRef > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ObjectRefArray();
    ~TNS__ObjectRefArray();

public:
    TNS__ObjectRefArray( const TNS__ObjectRefArray& );
    TNS__ObjectRefArray &operator=( const TNS__ObjectRefArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CustomFieldValueForIssueDataArray
{
public:
    void setItems( const QList< TNS__CustomFieldValueForIssueData >& _items );
    QList< TNS__CustomFieldValueForIssueData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CustomFieldValueForIssueDataArray();
    ~TNS__CustomFieldValueForIssueDataArray();

public:
    TNS__CustomFieldValueForIssueDataArray( const TNS__CustomFieldValueForIssueDataArray& );
    TNS__CustomFieldValueForIssueDataArray &operator=( const TNS__CustomFieldValueForIssueDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__CustomFieldLinkForProjectData
{
public:
    void setField( const TNS__ObjectRef& _field );
    TNS__ObjectRef field() const;
    void setSequence( signed char _sequence );
    signed char sequence() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__CustomFieldLinkForProjectData();
    ~TNS__CustomFieldLinkForProjectData();

public:
    TNS__CustomFieldLinkForProjectData( const TNS__CustomFieldLinkForProjectData& );
    TNS__CustomFieldLinkForProjectData &operator=( const TNS__CustomFieldLinkForProjectData& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ProjectAttachmentDataArray
{
public:
    void setItems( const QList< TNS__ProjectAttachmentData >& _items );
    QList< TNS__ProjectAttachmentData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ProjectAttachmentDataArray();
    ~TNS__ProjectAttachmentDataArray();

public:
    TNS__ProjectAttachmentDataArray( const TNS__ProjectAttachmentDataArray& );
    TNS__ProjectAttachmentDataArray &operator=( const TNS__ProjectAttachmentDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__IssueDataArray
{
public:
    void setItems( const QList< TNS__IssueData >& _items );
    QList< TNS__IssueData > items() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__IssueDataArray();
    ~TNS__IssueDataArray();

public:
    TNS__IssueDataArray( const TNS__IssueDataArray& );
    TNS__IssueDataArray &operator=( const TNS__IssueDataArray& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class TNS__ObjectRef
{
public:
    void setId( qint64 _id );
    qint64 id() const;
    void setName( const QString& _name );
    QString name() const;
    KDSoapValue serialize( const QString& valueName ) const;
    void deserialize( const KDSoapValue& mainValue );
    TNS__ObjectRef();
    ~TNS__ObjectRef();

public:
    TNS__ObjectRef( const TNS__ObjectRef& );
    TNS__ObjectRef &operator=( const TNS__ObjectRef& );

private:
    class PrivateDPtr;
    QSharedDataPointer<PrivateDPtr> d_ptr;
};

class Mc_versionJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_versionJob( MantisConnect* service, QObject* _parent = 0 );
    QString return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mResultReturn;
};

class Mc_enum_getJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_getJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setEnumeration( const QString& arg0 );
    QString enumeration() const;
    QString return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    QString mEnumeration;
    QString mResultReturn;
};

class Mc_issue_existsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_existsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    bool mResultReturn;
};

class Mc_issue_get_biggest_idJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_get_biggest_idJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    qint64 mResultReturn;
};

class Mc_issue_get_id_from_summaryJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_get_id_from_summaryJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setSummary( const QString& arg0 );
    QString summary() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    QString mSummary;
    qint64 mResultReturn;
};

class Mc_issue_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    bool mResultReturn;
};

class Mc_issue_note_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_note_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_note_id( qint64 arg0 );
    qint64 issue_note_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_note_id;
    bool mResultReturn;
};

class Mc_issue_relationship_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_relationship_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    void setRelationship_id( qint64 arg0 );
    qint64 relationship_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    qint64 mRelationship_id;
    bool mResultReturn;
};

class Mc_issue_attachment_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_attachment_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    void setName( const QString& arg0 );
    QString name() const;
    void setFile_type( const QString& arg0 );
    QString file_type() const;
    void setContent( const QByteArray& arg0 );
    QByteArray content() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    QString mName;
    QString mFile_type;
    QByteArray mContent;
    qint64 mResultReturn;
};

class Mc_issue_attachment_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_attachment_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_attachment_id( qint64 arg0 );
    qint64 issue_attachment_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_attachment_id;
    bool mResultReturn;
};

class Mc_issue_attachment_getJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_attachment_getJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_attachment_id( qint64 arg0 );
    qint64 issue_attachment_id() const;
    QByteArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_attachment_id;
    QByteArray mResultReturn;
};

class Mc_project_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    bool mResultReturn;
};

class Mc_project_get_id_from_nameJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_id_from_nameJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_name( const QString& arg0 );
    QString project_name() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    QString mProject_name;
    qint64 mResultReturn;
};

class Mc_project_add_categoryJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_add_categoryJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setP_category_name( const QString& arg0 );
    QString p_category_name() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    QString mP_category_name;
    qint64 mResultReturn;
};

class Mc_project_delete_categoryJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_delete_categoryJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setP_category_name( const QString& arg0 );
    QString p_category_name() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    QString mP_category_name;
    qint64 mResultReturn;
};

class Mc_project_rename_category_by_nameJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_rename_category_by_nameJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setP_category_name( const QString& arg0 );
    QString p_category_name() const;
    void setP_category_name_new( const QString& arg0 );
    QString p_category_name_new() const;
    void setP_assigned_to( qint64 arg0 );
    qint64 p_assigned_to() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    QString mP_category_name;
    QString mP_category_name_new;
    qint64 mP_assigned_to;
    qint64 mResultReturn;
};

class Mc_project_version_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_version_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setVersion_id( qint64 arg0 );
    qint64 version_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mVersion_id;
    bool mResultReturn;
};

class Mc_project_attachment_getJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_attachment_getJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_attachment_id( qint64 arg0 );
    qint64 project_attachment_id() const;
    QByteArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_attachment_id;
    QByteArray mResultReturn;
};

class Mc_project_attachment_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_attachment_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setName( const QString& arg0 );
    QString name() const;
    void setTitle( const QString& arg0 );
    QString title() const;
    void setDescription( const QString& arg0 );
    QString description() const;
    void setFile_type( const QString& arg0 );
    QString file_type() const;
    void setContent( const QByteArray& arg0 );
    QByteArray content() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    QString mName;
    QString mTitle;
    QString mDescription;
    QString mFile_type;
    QByteArray mContent;
    qint64 mResultReturn;
};

class Mc_project_attachment_deleteJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_attachment_deleteJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_attachment_id( qint64 arg0 );
    qint64 project_attachment_id() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_attachment_id;
    bool mResultReturn;
};

class Mc_config_get_stringJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_config_get_stringJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setConfig_var( const QString& arg0 );
    QString config_var() const;
    QString return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    QString mConfig_var;
    QString mResultReturn;
};

class Mc_issue_checkinJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_checkinJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    void setComment( const QString& arg0 );
    QString comment() const;
    void setFixed( bool arg0 );
    bool fixed() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    QString mComment;
    bool mFixed;
    bool mResultReturn;
};

class Mc_enum_statusJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_statusJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_prioritiesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_prioritiesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_severitiesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_severitiesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_reproducibilitiesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_reproducibilitiesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_projectionsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_projectionsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_etasJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_etasJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_resolutionsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_resolutionsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_access_levelsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_access_levelsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_project_statusJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_project_statusJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_project_view_statesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_project_view_statesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_view_statesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_view_statesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_enum_custom_field_typesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_enum_custom_field_typesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ObjectRefArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ObjectRefArray mResultReturn;
};

class Mc_issue_getJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_getJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    TNS__IssueData return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    TNS__IssueData mResultReturn;
};

class Mc_issue_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue( const TNS__IssueData& arg0 );
    TNS__IssueData issue() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__IssueData mIssue;
    qint64 mResultReturn;
};

class Mc_issue_updateJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_updateJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssueId( qint64 arg0 );
    qint64 issueId() const;
    void setIssue( const TNS__IssueData& arg0 );
    TNS__IssueData issue() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssueId;
    TNS__IssueData mIssue;
    bool mResultReturn;
};

class Mc_issue_note_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_note_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    void setNote( const TNS__IssueNoteData& arg0 );
    TNS__IssueNoteData note() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    TNS__IssueNoteData mNote;
    qint64 mResultReturn;
};

class Mc_issue_relationship_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_issue_relationship_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setIssue_id( qint64 arg0 );
    qint64 issue_id() const;
    void setRelationship( const TNS__RelationshipData& arg0 );
    TNS__RelationshipData relationship() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mIssue_id;
    TNS__RelationshipData mRelationship;
    qint64 mResultReturn;
};

class Mc_project_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject( const TNS__ProjectData& arg0 );
    TNS__ProjectData project() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ProjectData mProject;
    qint64 mResultReturn;
};

class Mc_project_updateJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_updateJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setProject( const TNS__ProjectData& arg0 );
    TNS__ProjectData project() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__ProjectData mProject;
    bool mResultReturn;
};

class Mc_project_get_issuesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_issuesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setPage_number( qint64 arg0 );
    qint64 page_number() const;
    void setPer_page( qint64 arg0 );
    qint64 per_page() const;
    TNS__IssueDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    qint64 mPage_number;
    qint64 mPer_page;
    TNS__IssueDataArray mResultReturn;
};

class Mc_project_get_issue_headersJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_issue_headersJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setPage_number( qint64 arg0 );
    qint64 page_number() const;
    void setPer_page( qint64 arg0 );
    qint64 per_page() const;
    TNS__IssueHeaderDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    qint64 mPage_number;
    qint64 mPer_page;
    TNS__IssueHeaderDataArray mResultReturn;
};

class Mc_project_get_usersJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_usersJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setAccess( qint64 arg0 );
    qint64 access() const;
    TNS__AccountDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    qint64 mAccess;
    TNS__AccountDataArray mResultReturn;
};

class Mc_projects_get_user_accessibleJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_projects_get_user_accessibleJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    TNS__ProjectDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ProjectDataArray mResultReturn;
};

class Mc_project_get_categoriesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_categoriesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__StringArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__StringArray mResultReturn;
};

class Mc_project_get_versionsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_versionsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__ProjectVersionDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__ProjectVersionDataArray mResultReturn;
};

class Mc_project_version_addJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_version_addJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setVersion( const TNS__ProjectVersionData& arg0 );
    TNS__ProjectVersionData version() const;
    qint64 return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    TNS__ProjectVersionData mVersion;
    qint64 mResultReturn;
};

class Mc_project_version_updateJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_version_updateJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setVersion_id( qint64 arg0 );
    qint64 version_id() const;
    void setVersion( const TNS__ProjectVersionData& arg0 );
    TNS__ProjectVersionData version() const;
    bool return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mVersion_id;
    TNS__ProjectVersionData mVersion;
    bool mResultReturn;
};

class Mc_project_get_released_versionsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_released_versionsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__ProjectVersionDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__ProjectVersionDataArray mResultReturn;
};

class Mc_project_get_unreleased_versionsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_unreleased_versionsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__ProjectVersionDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__ProjectVersionDataArray mResultReturn;
};

class Mc_project_get_attachmentsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_attachmentsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__ProjectAttachmentDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__ProjectAttachmentDataArray mResultReturn;
};

class Mc_project_get_custom_fieldsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_custom_fieldsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__CustomFieldDefinitionDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__CustomFieldDefinitionDataArray mResultReturn;
};

class Mc_project_get_all_subprojectsJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_project_get_all_subprojectsJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__StringArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__StringArray mResultReturn;
};

class Mc_filter_getJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_filter_getJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    TNS__FilterDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    TNS__FilterDataArray mResultReturn;
};

class Mc_filter_get_issuesJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_filter_get_issuesJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setFilter_id( qint64 arg0 );
    qint64 filter_id() const;
    void setPage_number( qint64 arg0 );
    qint64 page_number() const;
    void setPer_page( qint64 arg0 );
    qint64 per_page() const;
    TNS__IssueDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    qint64 mFilter_id;
    qint64 mPage_number;
    qint64 mPer_page;
    TNS__IssueDataArray mResultReturn;
};

class Mc_filter_get_issue_headersJob : public KDSoapJob
{
    Q_OBJECT

public:
    Mc_filter_get_issue_headersJob( MantisConnect* service, QObject* _parent = 0 );
    void setUsername( const QString& arg0 );
    QString username() const;
    void setPassword( const QString& arg0 );
    QString password() const;
    void setProject_id( qint64 arg0 );
    qint64 project_id() const;
    void setFilter_id( qint64 arg0 );
    qint64 filter_id() const;
    void setPage_number( qint64 arg0 );
    qint64 page_number() const;
    void setPer_page( qint64 arg0 );
    qint64 per_page() const;
    TNS__IssueHeaderDataArray return_() const;

protected:
    void doStart();

private Q_SLOTS:
    void slotFinished( KDSoapPendingCallWatcher* watcher );

private:
    MantisConnect *mService;
    QString mUsername;
    QString mPassword;
    qint64 mProject_id;
    qint64 mFilter_id;
    qint64 mPage_number;
    qint64 mPer_page;
    TNS__IssueHeaderDataArray mResultReturn;
};

class MantisConnect : public QObject
{
    Q_OBJECT

public:
    MantisConnect( QObject* _parent = 0 );
    ~MantisConnect();
    /**
        Asks Qt to ignore ssl errors in https requests. Use this for testing
        only!
     */
    void ignoreSslErrors();
    /**
        Overwrite the end point defined in the .wsdl file, with another
        http/https URL.
     */
    void setEndPoint( const QString& endPoint );
    /**
        Overwrite the soap version defined in the .wsdl file, with another
        version.
        version can be KDSoapClientInterface::SOAP1_1 or
        KDSoapClientInterface::SOAP1_2
     */
    void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
    /**
        Return the error from the last blocking call.
        Empty if no error.
     */
    QString lastError() const;
    /**
        Returns the underlying KDSoapClientInterface instance, which allows to
        access setCookieJar, lastResponseHeaders, etc.
     */
    const KDSoapClientInterface *clientInterface() const;
    KDSoapClientInterface *clientInterface();
    /**
        Blocking call to mc_version.
        Not recommended in a GUI thread.
     */
    QString mc_version();
    /**
        Asynchronous call to mc_version.
        Remember to connect to mc_versionDone and mc_versionError.
     */
    void asyncMc_version();
    /**
        Blocking call to mc_enum_status.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_status( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_status.
        Remember to connect to mc_enum_statusDone and mc_enum_statusError.
     */
    void asyncMc_enum_status( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_priorities.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_priorities( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_priorities.
        Remember to connect to mc_enum_prioritiesDone and
        mc_enum_prioritiesError.
     */
    void asyncMc_enum_priorities( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_severities.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_severities( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_severities.
        Remember to connect to mc_enum_severitiesDone and
        mc_enum_severitiesError.
     */
    void asyncMc_enum_severities( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_reproducibilities.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_reproducibilities( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_reproducibilities.
        Remember to connect to mc_enum_reproducibilitiesDone and
        mc_enum_reproducibilitiesError.
     */
    void asyncMc_enum_reproducibilities( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_projections.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_projections( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_projections.
        Remember to connect to mc_enum_projectionsDone and
        mc_enum_projectionsError.
     */
    void asyncMc_enum_projections( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_etas.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_etas( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_etas.
        Remember to connect to mc_enum_etasDone and mc_enum_etasError.
     */
    void asyncMc_enum_etas( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_resolutions.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_resolutions( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_resolutions.
        Remember to connect to mc_enum_resolutionsDone and
        mc_enum_resolutionsError.
     */
    void asyncMc_enum_resolutions( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_access_levels.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_access_levels( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_access_levels.
        Remember to connect to mc_enum_access_levelsDone and
        mc_enum_access_levelsError.
     */
    void asyncMc_enum_access_levels( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_project_status.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_project_status( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_project_status.
        Remember to connect to mc_enum_project_statusDone and
        mc_enum_project_statusError.
     */
    void asyncMc_enum_project_status( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_project_view_states.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_project_view_states( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_project_view_states.
        Remember to connect to mc_enum_project_view_statesDone and
        mc_enum_project_view_statesError.
     */
    void asyncMc_enum_project_view_states( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_view_states.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_view_states( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_view_states.
        Remember to connect to mc_enum_view_statesDone and
        mc_enum_view_statesError.
     */
    void asyncMc_enum_view_states( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_custom_field_types.
        Not recommended in a GUI thread.
     */
    TNS__ObjectRefArray mc_enum_custom_field_types( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_enum_custom_field_types.
        Remember to connect to mc_enum_custom_field_typesDone and
        mc_enum_custom_field_typesError.
     */
    void asyncMc_enum_custom_field_types( const QString& username, const QString& password );
    /**
        Blocking call to mc_enum_get.
        Not recommended in a GUI thread.
     */
    QString mc_enum_get( const QString& username, const QString& password, const QString& enumeration );
    /**
        Asynchronous call to mc_enum_get.
        Remember to connect to mc_enum_getDone and mc_enum_getError.
     */
    void asyncMc_enum_get( const QString& username, const QString& password, const QString& enumeration );
    /**
        Blocking call to mc_issue_exists.
        Not recommended in a GUI thread.
     */
    bool mc_issue_exists( const QString& username, const QString& password, qint64 issue_id );
    /**
        Asynchronous call to mc_issue_exists.
        Remember to connect to mc_issue_existsDone and mc_issue_existsError.
     */
    void asyncMc_issue_exists( const QString& username, const QString& password, qint64 issue_id );
    /**
        Blocking call to mc_issue_get.
        Not recommended in a GUI thread.
     */
    TNS__IssueData mc_issue_get( const QString& username, const QString& password, qint64 issue_id );
    /**
        Asynchronous call to mc_issue_get.
        Remember to connect to mc_issue_getDone and mc_issue_getError.
     */
    void asyncMc_issue_get( const QString& username, const QString& password, qint64 issue_id );
    /**
        Blocking call to mc_issue_get_biggest_id.
        Not recommended in a GUI thread.
     */
    qint64 mc_issue_get_biggest_id( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_issue_get_biggest_id.
        Remember to connect to mc_issue_get_biggest_idDone and
        mc_issue_get_biggest_idError.
     */
    void asyncMc_issue_get_biggest_id( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_issue_get_id_from_summary.
        Not recommended in a GUI thread.
     */
    qint64 mc_issue_get_id_from_summary( const QString& username, const QString& password, const QString& summary );
    /**
        Asynchronous call to mc_issue_get_id_from_summary.
        Remember to connect to mc_issue_get_id_from_summaryDone and
        mc_issue_get_id_from_summaryError.
     */
    void asyncMc_issue_get_id_from_summary( const QString& username, const QString& password, const QString& summary );
    /**
        Blocking call to mc_issue_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_issue_add( const QString& username, const QString& password, const TNS__IssueData& issue );
    /**
        Asynchronous call to mc_issue_add.
        Remember to connect to mc_issue_addDone and mc_issue_addError.
     */
    void asyncMc_issue_add( const QString& username, const QString& password, const TNS__IssueData& issue );
    /**
        Blocking call to mc_issue_update.
        Not recommended in a GUI thread.
     */
    bool mc_issue_update( const QString& username, const QString& password, qint64 issueId, const TNS__IssueData& issue );
    /**
        Asynchronous call to mc_issue_update.
        Remember to connect to mc_issue_updateDone and mc_issue_updateError.
     */
    void asyncMc_issue_update( const QString& username, const QString& password, qint64 issueId, const TNS__IssueData& issue );
    /**
        Blocking call to mc_issue_delete.
        Not recommended in a GUI thread.
     */
    bool mc_issue_delete( const QString& username, const QString& password, qint64 issue_id );
    /**
        Asynchronous call to mc_issue_delete.
        Remember to connect to mc_issue_deleteDone and mc_issue_deleteError.
     */
    void asyncMc_issue_delete( const QString& username, const QString& password, qint64 issue_id );
    /**
        Blocking call to mc_issue_note_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_issue_note_add( const QString& username, const QString& password, qint64 issue_id, const TNS__IssueNoteData& note );
    /**
        Asynchronous call to mc_issue_note_add.
        Remember to connect to mc_issue_note_addDone and
        mc_issue_note_addError.
     */
    void asyncMc_issue_note_add( const QString& username, const QString& password, qint64 issue_id, const TNS__IssueNoteData& note );
    /**
        Blocking call to mc_issue_note_delete.
        Not recommended in a GUI thread.
     */
    bool mc_issue_note_delete( const QString& username, const QString& password, qint64 issue_note_id );
    /**
        Asynchronous call to mc_issue_note_delete.
        Remember to connect to mc_issue_note_deleteDone and
        mc_issue_note_deleteError.
     */
    void asyncMc_issue_note_delete( const QString& username, const QString& password, qint64 issue_note_id );
    /**
        Blocking call to mc_issue_relationship_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_issue_relationship_add( const QString& username, const QString& password, qint64 issue_id, const TNS__RelationshipData& relationship );
    /**
        Asynchronous call to mc_issue_relationship_add.
        Remember to connect to mc_issue_relationship_addDone and
        mc_issue_relationship_addError.
     */
    void asyncMc_issue_relationship_add( const QString& username, const QString& password, qint64 issue_id, const TNS__RelationshipData& relationship );
    /**
        Blocking call to mc_issue_relationship_delete.
        Not recommended in a GUI thread.
     */
    bool mc_issue_relationship_delete( const QString& username, const QString& password, qint64 issue_id, qint64 relationship_id );
    /**
        Asynchronous call to mc_issue_relationship_delete.
        Remember to connect to mc_issue_relationship_deleteDone and
        mc_issue_relationship_deleteError.
     */
    void asyncMc_issue_relationship_delete( const QString& username, const QString& password, qint64 issue_id, qint64 relationship_id );
    /**
        Blocking call to mc_issue_attachment_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_issue_attachment_add( const QString& username, const QString& password, qint64 issue_id, const QString& name, const QString& file_type, const QByteArray& content );
    /**
        Asynchronous call to mc_issue_attachment_add.
        Remember to connect to mc_issue_attachment_addDone and
        mc_issue_attachment_addError.
     */
    void asyncMc_issue_attachment_add( const QString& username, const QString& password, qint64 issue_id, const QString& name, const QString& file_type, const QByteArray& content );
    /**
        Blocking call to mc_issue_attachment_delete.
        Not recommended in a GUI thread.
     */
    bool mc_issue_attachment_delete( const QString& username, const QString& password, qint64 issue_attachment_id );
    /**
        Asynchronous call to mc_issue_attachment_delete.
        Remember to connect to mc_issue_attachment_deleteDone and
        mc_issue_attachment_deleteError.
     */
    void asyncMc_issue_attachment_delete( const QString& username, const QString& password, qint64 issue_attachment_id );
    /**
        Blocking call to mc_issue_attachment_get.
        Not recommended in a GUI thread.
     */
    QByteArray mc_issue_attachment_get( const QString& username, const QString& password, qint64 issue_attachment_id );
    /**
        Asynchronous call to mc_issue_attachment_get.
        Remember to connect to mc_issue_attachment_getDone and
        mc_issue_attachment_getError.
     */
    void asyncMc_issue_attachment_get( const QString& username, const QString& password, qint64 issue_attachment_id );
    /**
        Blocking call to mc_project_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_add( const QString& username, const QString& password, const TNS__ProjectData& project );
    /**
        Asynchronous call to mc_project_add.
        Remember to connect to mc_project_addDone and mc_project_addError.
     */
    void asyncMc_project_add( const QString& username, const QString& password, const TNS__ProjectData& project );
    /**
        Blocking call to mc_project_delete.
        Not recommended in a GUI thread.
     */
    bool mc_project_delete( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_delete.
        Remember to connect to mc_project_deleteDone and
        mc_project_deleteError.
     */
    void asyncMc_project_delete( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_update.
        Not recommended in a GUI thread.
     */
    bool mc_project_update( const QString& username, const QString& password, qint64 project_id, const TNS__ProjectData& project );
    /**
        Asynchronous call to mc_project_update.
        Remember to connect to mc_project_updateDone and
        mc_project_updateError.
     */
    void asyncMc_project_update( const QString& username, const QString& password, qint64 project_id, const TNS__ProjectData& project );
    /**
        Blocking call to mc_project_get_id_from_name.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_get_id_from_name( const QString& username, const QString& password, const QString& project_name );
    /**
        Asynchronous call to mc_project_get_id_from_name.
        Remember to connect to mc_project_get_id_from_nameDone and
        mc_project_get_id_from_nameError.
     */
    void asyncMc_project_get_id_from_name( const QString& username, const QString& password, const QString& project_name );
    /**
        Blocking call to mc_project_get_issues.
        Not recommended in a GUI thread.
     */
    TNS__IssueDataArray mc_project_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page );
    /**
        Asynchronous call to mc_project_get_issues.
        Remember to connect to mc_project_get_issuesDone and
        mc_project_get_issuesError.
     */
    void asyncMc_project_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page );
    /**
        Blocking call to mc_project_get_issue_headers.
        Not recommended in a GUI thread.
     */
    TNS__IssueHeaderDataArray mc_project_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page );
    /**
        Asynchronous call to mc_project_get_issue_headers.
        Remember to connect to mc_project_get_issue_headersDone and
        mc_project_get_issue_headersError.
     */
    void asyncMc_project_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page );
    /**
        Blocking call to mc_project_get_users.
        Not recommended in a GUI thread.
     */
    TNS__AccountDataArray mc_project_get_users( const QString& username, const QString& password, qint64 project_id, qint64 access );
    /**
        Asynchronous call to mc_project_get_users.
        Remember to connect to mc_project_get_usersDone and
        mc_project_get_usersError.
     */
    void asyncMc_project_get_users( const QString& username, const QString& password, qint64 project_id, qint64 access );
    /**
        Blocking call to mc_projects_get_user_accessible.
        Not recommended in a GUI thread.
     */
    TNS__ProjectDataArray mc_projects_get_user_accessible( const QString& username, const QString& password );
    /**
        Asynchronous call to mc_projects_get_user_accessible.
        Remember to connect to mc_projects_get_user_accessibleDone and
        mc_projects_get_user_accessibleError.
     */
    void asyncMc_projects_get_user_accessible( const QString& username, const QString& password );
    /**
        Blocking call to mc_project_get_categories.
        Not recommended in a GUI thread.
     */
    TNS__StringArray mc_project_get_categories( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_categories.
        Remember to connect to mc_project_get_categoriesDone and
        mc_project_get_categoriesError.
     */
    void asyncMc_project_get_categories( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_add_category.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_add_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name );
    /**
        Asynchronous call to mc_project_add_category.
        Remember to connect to mc_project_add_categoryDone and
        mc_project_add_categoryError.
     */
    void asyncMc_project_add_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name );
    /**
        Blocking call to mc_project_delete_category.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_delete_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name );
    /**
        Asynchronous call to mc_project_delete_category.
        Remember to connect to mc_project_delete_categoryDone and
        mc_project_delete_categoryError.
     */
    void asyncMc_project_delete_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name );
    /**
        Blocking call to mc_project_rename_category_by_name.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_rename_category_by_name( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name, const QString& p_category_name_new, qint64 p_assigned_to );
    /**
        Asynchronous call to mc_project_rename_category_by_name.
        Remember to connect to mc_project_rename_category_by_nameDone and
        mc_project_rename_category_by_nameError.
     */
    void asyncMc_project_rename_category_by_name( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name, const QString& p_category_name_new, qint64 p_assigned_to );
    /**
        Blocking call to mc_project_get_versions.
        Not recommended in a GUI thread.
     */
    TNS__ProjectVersionDataArray mc_project_get_versions( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_versions.
        Remember to connect to mc_project_get_versionsDone and
        mc_project_get_versionsError.
     */
    void asyncMc_project_get_versions( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_version_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_version_add( const QString& username, const QString& password, const TNS__ProjectVersionData& version );
    /**
        Asynchronous call to mc_project_version_add.
        Remember to connect to mc_project_version_addDone and
        mc_project_version_addError.
     */
    void asyncMc_project_version_add( const QString& username, const QString& password, const TNS__ProjectVersionData& version );
    /**
        Blocking call to mc_project_version_update.
        Not recommended in a GUI thread.
     */
    bool mc_project_version_update( const QString& username, const QString& password, qint64 version_id, const TNS__ProjectVersionData& version );
    /**
        Asynchronous call to mc_project_version_update.
        Remember to connect to mc_project_version_updateDone and
        mc_project_version_updateError.
     */
    void asyncMc_project_version_update( const QString& username, const QString& password, qint64 version_id, const TNS__ProjectVersionData& version );
    /**
        Blocking call to mc_project_version_delete.
        Not recommended in a GUI thread.
     */
    bool mc_project_version_delete( const QString& username, const QString& password, qint64 version_id );
    /**
        Asynchronous call to mc_project_version_delete.
        Remember to connect to mc_project_version_deleteDone and
        mc_project_version_deleteError.
     */
    void asyncMc_project_version_delete( const QString& username, const QString& password, qint64 version_id );
    /**
        Blocking call to mc_project_get_released_versions.
        Not recommended in a GUI thread.
     */
    TNS__ProjectVersionDataArray mc_project_get_released_versions( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_released_versions.
        Remember to connect to mc_project_get_released_versionsDone and
        mc_project_get_released_versionsError.
     */
    void asyncMc_project_get_released_versions( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_get_unreleased_versions.
        Not recommended in a GUI thread.
     */
    TNS__ProjectVersionDataArray mc_project_get_unreleased_versions( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_unreleased_versions.
        Remember to connect to mc_project_get_unreleased_versionsDone and
        mc_project_get_unreleased_versionsError.
     */
    void asyncMc_project_get_unreleased_versions( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_get_attachments.
        Not recommended in a GUI thread.
     */
    TNS__ProjectAttachmentDataArray mc_project_get_attachments( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_attachments.
        Remember to connect to mc_project_get_attachmentsDone and
        mc_project_get_attachmentsError.
     */
    void asyncMc_project_get_attachments( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_get_custom_fields.
        Not recommended in a GUI thread.
     */
    TNS__CustomFieldDefinitionDataArray mc_project_get_custom_fields( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_custom_fields.
        Remember to connect to mc_project_get_custom_fieldsDone and
        mc_project_get_custom_fieldsError.
     */
    void asyncMc_project_get_custom_fields( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_project_attachment_get.
        Not recommended in a GUI thread.
     */
    QByteArray mc_project_attachment_get( const QString& username, const QString& password, qint64 project_attachment_id );
    /**
        Asynchronous call to mc_project_attachment_get.
        Remember to connect to mc_project_attachment_getDone and
        mc_project_attachment_getError.
     */
    void asyncMc_project_attachment_get( const QString& username, const QString& password, qint64 project_attachment_id );
    /**
        Blocking call to mc_project_attachment_add.
        Not recommended in a GUI thread.
     */
    qint64 mc_project_attachment_add( const QString& username, const QString& password, qint64 project_id, const QString& name, const QString& title, const QString& description, const QString& file_type, const QByteArray& content );
    /**
        Asynchronous call to mc_project_attachment_add.
        Remember to connect to mc_project_attachment_addDone and
        mc_project_attachment_addError.
     */
    void asyncMc_project_attachment_add( const QString& username, const QString& password, qint64 project_id, const QString& name, const QString& title, const QString& description, const QString& file_type, const QByteArray& content );
    /**
        Blocking call to mc_project_attachment_delete.
        Not recommended in a GUI thread.
     */
    bool mc_project_attachment_delete( const QString& username, const QString& password, qint64 project_attachment_id );
    /**
        Asynchronous call to mc_project_attachment_delete.
        Remember to connect to mc_project_attachment_deleteDone and
        mc_project_attachment_deleteError.
     */
    void asyncMc_project_attachment_delete( const QString& username, const QString& password, qint64 project_attachment_id );
    /**
        Blocking call to mc_project_get_all_subprojects.
        Not recommended in a GUI thread.
     */
    TNS__StringArray mc_project_get_all_subprojects( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_project_get_all_subprojects.
        Remember to connect to mc_project_get_all_subprojectsDone and
        mc_project_get_all_subprojectsError.
     */
    void asyncMc_project_get_all_subprojects( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_filter_get.
        Not recommended in a GUI thread.
     */
    TNS__FilterDataArray mc_filter_get( const QString& username, const QString& password, qint64 project_id );
    /**
        Asynchronous call to mc_filter_get.
        Remember to connect to mc_filter_getDone and mc_filter_getError.
     */
    void asyncMc_filter_get( const QString& username, const QString& password, qint64 project_id );
    /**
        Blocking call to mc_filter_get_issues.
        Not recommended in a GUI thread.
     */
    TNS__IssueDataArray mc_filter_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page );
    /**
        Asynchronous call to mc_filter_get_issues.
        Remember to connect to mc_filter_get_issuesDone and
        mc_filter_get_issuesError.
     */
    void asyncMc_filter_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page );
    /**
        Blocking call to mc_filter_get_issue_headers.
        Not recommended in a GUI thread.
     */
    TNS__IssueHeaderDataArray mc_filter_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page );
    /**
        Asynchronous call to mc_filter_get_issue_headers.
        Remember to connect to mc_filter_get_issue_headersDone and
        mc_filter_get_issue_headersError.
     */
    void asyncMc_filter_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page );
    /**
        Blocking call to mc_config_get_string.
        Not recommended in a GUI thread.
     */
    QString mc_config_get_string( const QString& username, const QString& password, const QString& config_var );
    /**
        Asynchronous call to mc_config_get_string.
        Remember to connect to mc_config_get_stringDone and
        mc_config_get_stringError.
     */
    void asyncMc_config_get_string( const QString& username, const QString& password, const QString& config_var );
    /**
        Blocking call to mc_issue_checkin.
        Not recommended in a GUI thread.
     */
    bool mc_issue_checkin( const QString& username, const QString& password, qint64 issue_id, const QString& comment, bool fixed );
    /**
        Asynchronous call to mc_issue_checkin.
        Remember to connect to mc_issue_checkinDone and mc_issue_checkinError.
     */
    void asyncMc_issue_checkin( const QString& username, const QString& password, qint64 issue_id, const QString& comment, bool fixed );

Q_SIGNALS:
    /**
        This signal is emitted whenever a SOAP call failed, for a central
        processing of all SOAP errors.
        method is the name of the method (or operation) that returned the
        fault, for instance "addContact".
     */
    void soapError( const QString& method, const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_version() succeeded.
     */
    void mc_versionDone( const QString& return_ );
    /**
        This signal is emitted whenever the call to mc_version() failed.
     */
    void mc_versionError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_status() succeeded.
     */
    void mc_enum_statusDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_status() failed.
     */
    void mc_enum_statusError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_priorities()
        succeeded.
     */
    void mc_enum_prioritiesDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_priorities()
        failed.
     */
    void mc_enum_prioritiesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_severities()
        succeeded.
     */
    void mc_enum_severitiesDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_severities()
        failed.
     */
    void mc_enum_severitiesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_reproducibilities()
        succeeded.
     */
    void mc_enum_reproducibilitiesDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_reproducibilities()
        failed.
     */
    void mc_enum_reproducibilitiesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_projections()
        succeeded.
     */
    void mc_enum_projectionsDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_projections()
        failed.
     */
    void mc_enum_projectionsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_etas() succeeded.
     */
    void mc_enum_etasDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_etas() failed.
     */
    void mc_enum_etasError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_resolutions()
        succeeded.
     */
    void mc_enum_resolutionsDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_resolutions()
        failed.
     */
    void mc_enum_resolutionsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_access_levels()
        succeeded.
     */
    void mc_enum_access_levelsDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_access_levels()
        failed.
     */
    void mc_enum_access_levelsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_project_status()
        succeeded.
     */
    void mc_enum_project_statusDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_project_status()
        failed.
     */
    void mc_enum_project_statusError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_enum_project_view_states() succeeded.
     */
    void mc_enum_project_view_statesDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_enum_project_view_states() failed.
     */
    void mc_enum_project_view_statesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_view_states()
        succeeded.
     */
    void mc_enum_view_statesDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_view_states()
        failed.
     */
    void mc_enum_view_statesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_enum_custom_field_types() succeeded.
     */
    void mc_enum_custom_field_typesDone( const TNS__ObjectRefArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_enum_custom_field_types() failed.
     */
    void mc_enum_custom_field_typesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_enum_get() succeeded.
     */
    void mc_enum_getDone( const QString& return_ );
    /**
        This signal is emitted whenever the call to mc_enum_get() failed.
     */
    void mc_enum_getError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_exists()
        succeeded.
     */
    void mc_issue_existsDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_issue_exists() failed.
     */
    void mc_issue_existsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_get() succeeded.
     */
    void mc_issue_getDone( const TNS__IssueData& return_ );
    /**
        This signal is emitted whenever the call to mc_issue_get() failed.
     */
    void mc_issue_getError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_get_biggest_id()
        succeeded.
     */
    void mc_issue_get_biggest_idDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_issue_get_biggest_id()
        failed.
     */
    void mc_issue_get_biggest_idError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_issue_get_id_from_summary() succeeded.
     */
    void mc_issue_get_id_from_summaryDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to
        mc_issue_get_id_from_summary() failed.
     */
    void mc_issue_get_id_from_summaryError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_add() succeeded.
     */
    void mc_issue_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_issue_add() failed.
     */
    void mc_issue_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_update()
        succeeded.
     */
    void mc_issue_updateDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_issue_update() failed.
     */
    void mc_issue_updateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_delete()
        succeeded.
     */
    void mc_issue_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_issue_delete() failed.
     */
    void mc_issue_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_note_add()
        succeeded.
     */
    void mc_issue_note_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_issue_note_add() failed.
     */
    void mc_issue_note_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_note_delete()
        succeeded.
     */
    void mc_issue_note_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_issue_note_delete()
        failed.
     */
    void mc_issue_note_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_relationship_add()
        succeeded.
     */
    void mc_issue_relationship_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_issue_relationship_add()
        failed.
     */
    void mc_issue_relationship_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_issue_relationship_delete() succeeded.
     */
    void mc_issue_relationship_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to
        mc_issue_relationship_delete() failed.
     */
    void mc_issue_relationship_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_attachment_add()
        succeeded.
     */
    void mc_issue_attachment_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_issue_attachment_add()
        failed.
     */
    void mc_issue_attachment_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_issue_attachment_delete() succeeded.
     */
    void mc_issue_attachment_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to
        mc_issue_attachment_delete() failed.
     */
    void mc_issue_attachment_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_attachment_get()
        succeeded.
     */
    void mc_issue_attachment_getDone( const QByteArray& return_ );
    /**
        This signal is emitted whenever the call to mc_issue_attachment_get()
        failed.
     */
    void mc_issue_attachment_getError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_add() succeeded.
     */
    void mc_project_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_project_add() failed.
     */
    void mc_project_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_delete()
        succeeded.
     */
    void mc_project_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_project_delete() failed.
     */
    void mc_project_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_update()
        succeeded.
     */
    void mc_project_updateDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_project_update() failed.
     */
    void mc_project_updateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_id_from_name() succeeded.
     */
    void mc_project_get_id_from_nameDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_id_from_name() failed.
     */
    void mc_project_get_id_from_nameError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_get_issues()
        succeeded.
     */
    void mc_project_get_issuesDone( const TNS__IssueDataArray& return_ );
    /**
        This signal is emitted whenever the call to mc_project_get_issues()
        failed.
     */
    void mc_project_get_issuesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_issue_headers() succeeded.
     */
    void mc_project_get_issue_headersDone( const TNS__IssueHeaderDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_issue_headers() failed.
     */
    void mc_project_get_issue_headersError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_get_users()
        succeeded.
     */
    void mc_project_get_usersDone( const TNS__AccountDataArray& return_ );
    /**
        This signal is emitted whenever the call to mc_project_get_users()
        failed.
     */
    void mc_project_get_usersError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_projects_get_user_accessible() succeeded.
     */
    void mc_projects_get_user_accessibleDone( const TNS__ProjectDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_projects_get_user_accessible() failed.
     */
    void mc_projects_get_user_accessibleError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_get_categories()
        succeeded.
     */
    void mc_project_get_categoriesDone( const TNS__StringArray& return_ );
    /**
        This signal is emitted whenever the call to mc_project_get_categories()
        failed.
     */
    void mc_project_get_categoriesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_add_category()
        succeeded.
     */
    void mc_project_add_categoryDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_project_add_category()
        failed.
     */
    void mc_project_add_categoryError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_delete_category() succeeded.
     */
    void mc_project_delete_categoryDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_delete_category() failed.
     */
    void mc_project_delete_categoryError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_rename_category_by_name() succeeded.
     */
    void mc_project_rename_category_by_nameDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_rename_category_by_name() failed.
     */
    void mc_project_rename_category_by_nameError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_get_versions()
        succeeded.
     */
    void mc_project_get_versionsDone( const TNS__ProjectVersionDataArray& return_ );
    /**
        This signal is emitted whenever the call to mc_project_get_versions()
        failed.
     */
    void mc_project_get_versionsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_version_add()
        succeeded.
     */
    void mc_project_version_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_project_version_add()
        failed.
     */
    void mc_project_version_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_version_update()
        succeeded.
     */
    void mc_project_version_updateDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_project_version_update()
        failed.
     */
    void mc_project_version_updateError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_version_delete()
        succeeded.
     */
    void mc_project_version_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_project_version_delete()
        failed.
     */
    void mc_project_version_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_released_versions() succeeded.
     */
    void mc_project_get_released_versionsDone( const TNS__ProjectVersionDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_released_versions() failed.
     */
    void mc_project_get_released_versionsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_unreleased_versions() succeeded.
     */
    void mc_project_get_unreleased_versionsDone( const TNS__ProjectVersionDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_unreleased_versions() failed.
     */
    void mc_project_get_unreleased_versionsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_attachments() succeeded.
     */
    void mc_project_get_attachmentsDone( const TNS__ProjectAttachmentDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_attachments() failed.
     */
    void mc_project_get_attachmentsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_custom_fields() succeeded.
     */
    void mc_project_get_custom_fieldsDone( const TNS__CustomFieldDefinitionDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_custom_fields() failed.
     */
    void mc_project_get_custom_fieldsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_attachment_get()
        succeeded.
     */
    void mc_project_attachment_getDone( const QByteArray& return_ );
    /**
        This signal is emitted whenever the call to mc_project_attachment_get()
        failed.
     */
    void mc_project_attachment_getError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_project_attachment_add()
        succeeded.
     */
    void mc_project_attachment_addDone( qint64 return_ );
    /**
        This signal is emitted whenever the call to mc_project_attachment_add()
        failed.
     */
    void mc_project_attachment_addError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_attachment_delete() succeeded.
     */
    void mc_project_attachment_deleteDone( bool return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_attachment_delete() failed.
     */
    void mc_project_attachment_deleteError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_project_get_all_subprojects() succeeded.
     */
    void mc_project_get_all_subprojectsDone( const TNS__StringArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_project_get_all_subprojects() failed.
     */
    void mc_project_get_all_subprojectsError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_filter_get() succeeded.
     */
    void mc_filter_getDone( const TNS__FilterDataArray& return_ );
    /**
        This signal is emitted whenever the call to mc_filter_get() failed.
     */
    void mc_filter_getError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_filter_get_issues()
        succeeded.
     */
    void mc_filter_get_issuesDone( const TNS__IssueDataArray& return_ );
    /**
        This signal is emitted whenever the call to mc_filter_get_issues()
        failed.
     */
    void mc_filter_get_issuesError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to
        mc_filter_get_issue_headers() succeeded.
     */
    void mc_filter_get_issue_headersDone( const TNS__IssueHeaderDataArray& return_ );
    /**
        This signal is emitted whenever the call to
        mc_filter_get_issue_headers() failed.
     */
    void mc_filter_get_issue_headersError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_config_get_string()
        succeeded.
     */
    void mc_config_get_stringDone( const QString& return_ );
    /**
        This signal is emitted whenever the call to mc_config_get_string()
        failed.
     */
    void mc_config_get_stringError( const KDSoapMessage& fault );
    /**
        This signal is emitted whenever the call to mc_issue_checkin()
        succeeded.
     */
    void mc_issue_checkinDone( bool return_ );
    /**
        This signal is emitted whenever the call to mc_issue_checkin() failed.
     */
    void mc_issue_checkinError( const KDSoapMessage& fault );

private Q_SLOTS:
    void _kd_slotMc_versionFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_statusFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_prioritiesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_severitiesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_reproducibilitiesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_projectionsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_etasFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_resolutionsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_access_levelsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_project_statusFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_project_view_statesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_view_statesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_custom_field_typesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_enum_getFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_existsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_getFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_get_biggest_idFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_get_id_from_summaryFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_updateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_note_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_note_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_relationship_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_relationship_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_attachment_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_attachment_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_attachment_getFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_updateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_id_from_nameFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_issuesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_issue_headersFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_usersFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_projects_get_user_accessibleFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_categoriesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_add_categoryFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_delete_categoryFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_rename_category_by_nameFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_versionsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_version_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_version_updateFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_version_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_released_versionsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_unreleased_versionsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_attachmentsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_custom_fieldsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_attachment_getFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_attachment_addFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_attachment_deleteFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_project_get_all_subprojectsFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_filter_getFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_filter_get_issuesFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_filter_get_issue_headersFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_config_get_stringFinished( KDSoapPendingCallWatcher* watcher );
    void _kd_slotMc_issue_checkinFinished( KDSoapPendingCallWatcher* watcher );

private:
    class PrivateDPtr;
    PrivateDPtr *d_ptr;
};

#endif
