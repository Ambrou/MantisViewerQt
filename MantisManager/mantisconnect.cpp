// This file is generated by KDAB's kdwsdl2cpp from mantisconnect.php?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "stdafx.h"
#include "mantisconnect.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <QSharedPointer>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

class TNS__CustomFieldValueForIssueDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__CustomFieldValueForIssueData > mItems;
};

void TNS__CustomFieldValueForIssueDataArray::setItems( const QList< TNS__CustomFieldValueForIssueData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__CustomFieldValueForIssueData > TNS__CustomFieldValueForIssueDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__CustomFieldValueForIssueDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldValueForIssueDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldValueForIssueData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__CustomFieldValueForIssueDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__CustomFieldValueForIssueData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__CustomFieldValueForIssueDataArray::TNS__CustomFieldValueForIssueDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CustomFieldValueForIssueDataArray::~TNS__CustomFieldValueForIssueDataArray()
{
}

TNS__CustomFieldValueForIssueDataArray::TNS__CustomFieldValueForIssueDataArray( const TNS__CustomFieldValueForIssueDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CustomFieldValueForIssueDataArray&  TNS__CustomFieldValueForIssueDataArray::operator=( const TNS__CustomFieldValueForIssueDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ProjectAttachmentData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    QString mFilename;
    bool mFilename_nil;
    QString mTitle;
    bool mTitle_nil;
    QString mDescription;
    bool mDescription_nil;
    qint64 mSize;
    bool mSize_nil;
    QString mContent_type;
    bool mContent_type_nil;
    KDDateTime mDate_submitted;
    bool mDate_submitted_nil;
    QString mDownload_url;
    bool mDownload_url_nil;
};

TNS__ProjectAttachmentData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mFilename_nil(true), mTitle_nil(true), mDescription_nil(true), mSize(0), mSize_nil(true), mContent_type_nil(true), mDate_submitted_nil(true), mDownload_url_nil(true)
{
}


void TNS__ProjectAttachmentData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__ProjectAttachmentData::id() const
{
    return d_ptr->mId;
}

void TNS__ProjectAttachmentData::setFilename( const QString& _filename )
{
    d_ptr->mFilename_nil = false;
    d_ptr->mFilename = _filename;
}

QString TNS__ProjectAttachmentData::filename() const
{
    return d_ptr->mFilename;
}

void TNS__ProjectAttachmentData::setTitle( const QString& _title )
{
    d_ptr->mTitle_nil = false;
    d_ptr->mTitle = _title;
}

QString TNS__ProjectAttachmentData::title() const
{
    return d_ptr->mTitle;
}

void TNS__ProjectAttachmentData::setDescription( const QString& _description )
{
    d_ptr->mDescription_nil = false;
    d_ptr->mDescription = _description;
}

QString TNS__ProjectAttachmentData::description() const
{
    return d_ptr->mDescription;
}

void TNS__ProjectAttachmentData::setSize( qint64 _size )
{
    d_ptr->mSize_nil = false;
    d_ptr->mSize = _size;
}

qint64 TNS__ProjectAttachmentData::size() const
{
    return d_ptr->mSize;
}

void TNS__ProjectAttachmentData::setContent_type( const QString& _content_type )
{
    d_ptr->mContent_type_nil = false;
    d_ptr->mContent_type = _content_type;
}

QString TNS__ProjectAttachmentData::content_type() const
{
    return d_ptr->mContent_type;
}

void TNS__ProjectAttachmentData::setDate_submitted( const KDDateTime& _date_submitted )
{
    d_ptr->mDate_submitted_nil = false;
    d_ptr->mDate_submitted = _date_submitted;
}

KDDateTime TNS__ProjectAttachmentData::date_submitted() const
{
    return d_ptr->mDate_submitted;
}

void TNS__ProjectAttachmentData::setDownload_url( const QString& _download_url )
{
    d_ptr->mDownload_url_nil = false;
    d_ptr->mDownload_url = _download_url;
}

QString TNS__ProjectAttachmentData::download_url() const
{
    return d_ptr->mDownload_url;
}

KDSoapValue TNS__ProjectAttachmentData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectAttachmentData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mFilename_nil) {
        KDSoapValue _valueFilename(QString::fromLatin1("filename"), QVariant::fromValue(d_ptr->mFilename), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueFilename.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueFilename.isNil())
        args.append(_valueFilename);
    }
    if (!d_ptr->mTitle_nil) {
        KDSoapValue _valueTitle(QString::fromLatin1("title"), QVariant::fromValue(d_ptr->mTitle), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueTitle.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueTitle.isNil())
        args.append(_valueTitle);
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDescription.isNil())
        args.append(_valueDescription);
    }
    if (!d_ptr->mSize_nil) {
        KDSoapValue _valueSize(QString::fromLatin1("size"), QVariant::fromValue(d_ptr->mSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueSize.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSize.isNil())
        args.append(_valueSize);
    }
    if (!d_ptr->mContent_type_nil) {
        KDSoapValue _valueContent_type(QString::fromLatin1("content_type"), QVariant::fromValue(d_ptr->mContent_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueContent_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueContent_type.isNil())
        args.append(_valueContent_type);
    }
    if (!d_ptr->mDate_submitted_nil) {
        KDSoapValue _valueDate_submitted(QString::fromLatin1("date_submitted"), d_ptr->mDate_submitted.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueDate_submitted.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDate_submitted.isNil())
        args.append(_valueDate_submitted);
    }
    if (!d_ptr->mDownload_url_nil) {
        KDSoapValue _valueDownload_url(QString::fromLatin1("download_url"), QVariant::fromValue(d_ptr->mDownload_url), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));
        _valueDownload_url.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDownload_url.isNil())
        args.append(_valueDownload_url);
    }
    return mainValue;
}

void TNS__ProjectAttachmentData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("filename")) {
            d_ptr->mFilename = val.value().value<QString>();
            d_ptr->mFilename_nil = false;
        }
        else if (_name == QLatin1String("title")) {
            d_ptr->mTitle = val.value().value<QString>();
            d_ptr->mTitle_nil = false;
        }
        else if (_name == QLatin1String("description")) {
            d_ptr->mDescription = val.value().value<QString>();
            d_ptr->mDescription_nil = false;
        }
        else if (_name == QLatin1String("size")) {
            d_ptr->mSize = val.value().value<qint64>();
            d_ptr->mSize_nil = false;
        }
        else if (_name == QLatin1String("content_type")) {
            d_ptr->mContent_type = val.value().value<QString>();
            d_ptr->mContent_type_nil = false;
        }
        else if (_name == QLatin1String("date_submitted")) {
            d_ptr->mDate_submitted = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mDate_submitted_nil = false;
        }
        else if (_name == QLatin1String("download_url")) {
            d_ptr->mDownload_url = val.value().value<QString>();
            d_ptr->mDownload_url_nil = false;
        }
    }
}

TNS__ProjectAttachmentData::TNS__ProjectAttachmentData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ProjectAttachmentData::~TNS__ProjectAttachmentData()
{
}

TNS__ProjectAttachmentData::TNS__ProjectAttachmentData( const TNS__ProjectAttachmentData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ProjectAttachmentData&  TNS__ProjectAttachmentData::operator=( const TNS__ProjectAttachmentData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__FilterData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    TNS__AccountData mOwner;
    bool mOwner_nil;
    qint64 mProject_id;
    bool mProject_id_nil;
    bool mIs_public;
    bool mIs_public_nil;
    QString mName;
    bool mName_nil;
    QString mFilter_string;
    bool mFilter_string_nil;
    QString mUrl;
    bool mUrl_nil;
};

TNS__FilterData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mOwner_nil(true), mProject_id(0), mProject_id_nil(true), mIs_public(false), mIs_public_nil(true), mName_nil(true), mFilter_string_nil(true), mUrl_nil(true)
{
}


void TNS__FilterData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__FilterData::id() const
{
    return d_ptr->mId;
}

void TNS__FilterData::setOwner( const TNS__AccountData& _owner )
{
    d_ptr->mOwner_nil = false;
    d_ptr->mOwner = _owner;
}

TNS__AccountData TNS__FilterData::owner() const
{
    return d_ptr->mOwner;
}

void TNS__FilterData::setProject_id( qint64 _project_id )
{
    d_ptr->mProject_id_nil = false;
    d_ptr->mProject_id = _project_id;
}

qint64 TNS__FilterData::project_id() const
{
    return d_ptr->mProject_id;
}

void TNS__FilterData::setIs_public( bool _is_public )
{
    d_ptr->mIs_public_nil = false;
    d_ptr->mIs_public = _is_public;
}

bool TNS__FilterData::is_public() const
{
    return d_ptr->mIs_public;
}

void TNS__FilterData::setName( const QString& _name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = _name;
}

QString TNS__FilterData::name() const
{
    return d_ptr->mName;
}

void TNS__FilterData::setFilter_string( const QString& _filter_string )
{
    d_ptr->mFilter_string_nil = false;
    d_ptr->mFilter_string = _filter_string;
}

QString TNS__FilterData::filter_string() const
{
    return d_ptr->mFilter_string;
}

void TNS__FilterData::setUrl( const QString& _url )
{
    d_ptr->mUrl_nil = false;
    d_ptr->mUrl = _url;
}

QString TNS__FilterData::url() const
{
    return d_ptr->mUrl;
}

KDSoapValue TNS__FilterData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("FilterData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mOwner_nil) {
        KDSoapValue _valueOwner(d_ptr->mOwner.serialize(QString::fromLatin1("owner")));
        _valueOwner.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueOwner.isNil())
        args.append(_valueOwner);
    }
    if (!d_ptr->mProject_id_nil) {
        KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(d_ptr->mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueProject_id.isNil())
        args.append(_valueProject_id);
    }
    if (!d_ptr->mIs_public_nil) {
        KDSoapValue _valueIs_public(QString::fromLatin1("is_public"), QVariant::fromValue(d_ptr->mIs_public), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueIs_public.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueIs_public.isNil())
        args.append(_valueIs_public);
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueName.isNil())
        args.append(_valueName);
    }
    if (!d_ptr->mFilter_string_nil) {
        KDSoapValue _valueFilter_string(QString::fromLatin1("filter_string"), QVariant::fromValue(d_ptr->mFilter_string), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueFilter_string.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueFilter_string.isNil())
        args.append(_valueFilter_string);
    }
    if (!d_ptr->mUrl_nil) {
        KDSoapValue _valueUrl(QString::fromLatin1("url"), QVariant::fromValue(d_ptr->mUrl), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueUrl.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueUrl.isNil())
        args.append(_valueUrl);
    }
    return mainValue;
}

void TNS__FilterData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("owner")) {
            d_ptr->mOwner.deserialize(val);
        }
        else if (_name == QLatin1String("project_id")) {
            d_ptr->mProject_id = val.value().value<qint64>();
            d_ptr->mProject_id_nil = false;
        }
        else if (_name == QLatin1String("is_public")) {
            d_ptr->mIs_public = val.value().value<bool>();
            d_ptr->mIs_public_nil = false;
        }
        else if (_name == QLatin1String("name")) {
            d_ptr->mName = val.value().value<QString>();
            d_ptr->mName_nil = false;
        }
        else if (_name == QLatin1String("filter_string")) {
            d_ptr->mFilter_string = val.value().value<QString>();
            d_ptr->mFilter_string_nil = false;
        }
        else if (_name == QLatin1String("url")) {
            d_ptr->mUrl = val.value().value<QString>();
            d_ptr->mUrl_nil = false;
        }
    }
}

TNS__FilterData::TNS__FilterData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FilterData::~TNS__FilterData()
{
}

TNS__FilterData::TNS__FilterData( const TNS__FilterData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__FilterData&  TNS__FilterData::operator=( const TNS__FilterData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__IssueHeaderData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    qint64 mView_state;
    KDDateTime mLast_updated;
    qint64 mProject;
    QString mCategory;
    qint64 mPriority;
    qint64 mSeverity;
    qint64 mStatus;
    qint64 mReporter;
    QString mSummary;
    qint64 mHandler;
    qint64 mResolution;
    qint64 mAttachments_count;
    qint64 mNotes_count;
};

TNS__IssueHeaderData::PrivateDPtr::PrivateDPtr()
    : mId(0), mView_state(0), mProject(0), mPriority(0), mSeverity(0), mStatus(0), mReporter(0), mHandler(0), mResolution(0), mAttachments_count(0), mNotes_count(0)
{
}


void TNS__IssueHeaderData::setId( qint64 _id )
{
    d_ptr->mId = _id;
}

qint64 TNS__IssueHeaderData::id() const
{
    return d_ptr->mId;
}

void TNS__IssueHeaderData::setView_state( qint64 _view_state )
{
    d_ptr->mView_state = _view_state;
}

qint64 TNS__IssueHeaderData::view_state() const
{
    return d_ptr->mView_state;
}

void TNS__IssueHeaderData::setLast_updated( const KDDateTime& _last_updated )
{
    d_ptr->mLast_updated = _last_updated;
}

KDDateTime TNS__IssueHeaderData::last_updated() const
{
    return d_ptr->mLast_updated;
}

void TNS__IssueHeaderData::setProject( qint64 _project )
{
    d_ptr->mProject = _project;
}

qint64 TNS__IssueHeaderData::project() const
{
    return d_ptr->mProject;
}

void TNS__IssueHeaderData::setCategory( const QString& _category )
{
    d_ptr->mCategory = _category;
}

QString TNS__IssueHeaderData::category() const
{
    return d_ptr->mCategory;
}

void TNS__IssueHeaderData::setPriority( qint64 _priority )
{
    d_ptr->mPriority = _priority;
}

qint64 TNS__IssueHeaderData::priority() const
{
    return d_ptr->mPriority;
}

void TNS__IssueHeaderData::setSeverity( qint64 _severity )
{
    d_ptr->mSeverity = _severity;
}

qint64 TNS__IssueHeaderData::severity() const
{
    return d_ptr->mSeverity;
}

void TNS__IssueHeaderData::setStatus( qint64 _status )
{
    d_ptr->mStatus = _status;
}

qint64 TNS__IssueHeaderData::status() const
{
    return d_ptr->mStatus;
}

void TNS__IssueHeaderData::setReporter( qint64 _reporter )
{
    d_ptr->mReporter = _reporter;
}

qint64 TNS__IssueHeaderData::reporter() const
{
    return d_ptr->mReporter;
}

void TNS__IssueHeaderData::setSummary( const QString& _summary )
{
    d_ptr->mSummary = _summary;
}

QString TNS__IssueHeaderData::summary() const
{
    return d_ptr->mSummary;
}

void TNS__IssueHeaderData::setHandler( qint64 _handler )
{
    d_ptr->mHandler = _handler;
}

qint64 TNS__IssueHeaderData::handler() const
{
    return d_ptr->mHandler;
}

void TNS__IssueHeaderData::setResolution( qint64 _resolution )
{
    d_ptr->mResolution = _resolution;
}

qint64 TNS__IssueHeaderData::resolution() const
{
    return d_ptr->mResolution;
}

void TNS__IssueHeaderData::setAttachments_count( qint64 _attachments_count )
{
    d_ptr->mAttachments_count = _attachments_count;
}

qint64 TNS__IssueHeaderData::attachments_count() const
{
    return d_ptr->mAttachments_count;
}

void TNS__IssueHeaderData::setNotes_count( qint64 _notes_count )
{
    d_ptr->mNotes_count = _notes_count;
}

qint64 TNS__IssueHeaderData::notes_count() const
{
    return d_ptr->mNotes_count;
}

KDSoapValue TNS__IssueHeaderData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueHeaderData"));
    KDSoapValueList& args = mainValue.childValues();
    KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueId);
    KDSoapValue _valueView_state(QString::fromLatin1("view_state"), QVariant::fromValue(d_ptr->mView_state), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueView_state.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueView_state);
    KDSoapValue _valueLast_updated(QString::fromLatin1("last_updated"), d_ptr->mLast_updated.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
    _valueLast_updated.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueLast_updated);
    KDSoapValue _valueProject(QString::fromLatin1("project"), QVariant::fromValue(d_ptr->mProject), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueProject);
    KDSoapValue _valueCategory(QString::fromLatin1("category"), QVariant::fromValue(d_ptr->mCategory), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueCategory.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueCategory);
    KDSoapValue _valuePriority(QString::fromLatin1("priority"), QVariant::fromValue(d_ptr->mPriority), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePriority.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valuePriority);
    KDSoapValue _valueSeverity(QString::fromLatin1("severity"), QVariant::fromValue(d_ptr->mSeverity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueSeverity.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueSeverity);
    KDSoapValue _valueStatus(QString::fromLatin1("status"), QVariant::fromValue(d_ptr->mStatus), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueStatus.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueStatus);
    KDSoapValue _valueReporter(QString::fromLatin1("reporter"), QVariant::fromValue(d_ptr->mReporter), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueReporter.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueReporter);
    KDSoapValue _valueSummary(QString::fromLatin1("summary"), QVariant::fromValue(d_ptr->mSummary), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueSummary.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueSummary);
    KDSoapValue _valueHandler(QString::fromLatin1("handler"), QVariant::fromValue(d_ptr->mHandler), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueHandler.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueHandler);
    KDSoapValue _valueResolution(QString::fromLatin1("resolution"), QVariant::fromValue(d_ptr->mResolution), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueResolution.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueResolution);
    KDSoapValue _valueAttachments_count(QString::fromLatin1("attachments_count"), QVariant::fromValue(d_ptr->mAttachments_count), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueAttachments_count.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueAttachments_count);
    KDSoapValue _valueNotes_count(QString::fromLatin1("notes_count"), QVariant::fromValue(d_ptr->mNotes_count), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueNotes_count.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    args.append(_valueNotes_count);
    return mainValue;
}

void TNS__IssueHeaderData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("view_state")) {
            d_ptr->mView_state = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("last_updated")) {
            d_ptr->mLast_updated = KDDateTime::fromDateString(val.value().toString());
        }
        else if (_name == QLatin1String("project")) {
            d_ptr->mProject = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("category")) {
            d_ptr->mCategory = val.value().value<QString>();
        }
        else if (_name == QLatin1String("priority")) {
            d_ptr->mPriority = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("severity")) {
            d_ptr->mSeverity = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("status")) {
            d_ptr->mStatus = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("reporter")) {
            d_ptr->mReporter = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("summary")) {
            d_ptr->mSummary = val.value().value<QString>();
        }
        else if (_name == QLatin1String("handler")) {
            d_ptr->mHandler = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("resolution")) {
            d_ptr->mResolution = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("attachments_count")) {
            d_ptr->mAttachments_count = val.value().value<qint64>();
        }
        else if (_name == QLatin1String("notes_count")) {
            d_ptr->mNotes_count = val.value().value<qint64>();
        }
    }
}

TNS__IssueHeaderData::TNS__IssueHeaderData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__IssueHeaderData::~TNS__IssueHeaderData()
{
}

TNS__IssueHeaderData::TNS__IssueHeaderData( const TNS__IssueHeaderData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__IssueHeaderData&  TNS__IssueHeaderData::operator=( const TNS__IssueHeaderData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__StringArray::PrivateDPtr : public QSharedData
{
public:
    QStringList mItems;
};

void TNS__StringArray::setItems( const QStringList& _items )
{
    d_ptr->mItems = _items;
}

QStringList TNS__StringArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__StringArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("StringArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://www.w3.org/2001/XMLSchema"), QString::fromLatin1("string"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(QString::fromLatin1("item"), QVariant::fromValue(d_ptr->mItems.at(i)), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__StringArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        QString mItemsTemp;
        mItemsTemp = val.value().value<QString>();
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__StringArray::TNS__StringArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__StringArray::~TNS__StringArray()
{
}

TNS__StringArray::TNS__StringArray( const TNS__StringArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__StringArray&  TNS__StringArray::operator=( const TNS__StringArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__RelationshipData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    TNS__ObjectRef mType;
    bool mType_nil;
    qint64 mTarget_id;
    bool mTarget_id_nil;
};

TNS__RelationshipData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mType_nil(true), mTarget_id(0), mTarget_id_nil(true)
{
}


void TNS__RelationshipData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__RelationshipData::id() const
{
    return d_ptr->mId;
}

void TNS__RelationshipData::setType( const TNS__ObjectRef& _type )
{
    d_ptr->mType_nil = false;
    d_ptr->mType = _type;
}

TNS__ObjectRef TNS__RelationshipData::type() const
{
    return d_ptr->mType;
}

void TNS__RelationshipData::setTarget_id( qint64 _target_id )
{
    d_ptr->mTarget_id_nil = false;
    d_ptr->mTarget_id = _target_id;
}

qint64 TNS__RelationshipData::target_id() const
{
    return d_ptr->mTarget_id;
}

KDSoapValue TNS__RelationshipData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("RelationshipData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mType_nil) {
        KDSoapValue _valueType(d_ptr->mType.serialize(QString::fromLatin1("type")));
        _valueType.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueType.isNil())
        args.append(_valueType);
    }
    if (!d_ptr->mTarget_id_nil) {
        KDSoapValue _valueTarget_id(QString::fromLatin1("target_id"), QVariant::fromValue(d_ptr->mTarget_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueTarget_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueTarget_id.isNil())
        args.append(_valueTarget_id);
    }
    return mainValue;
}

void TNS__RelationshipData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("type")) {
            d_ptr->mType.deserialize(val);
        }
        else if (_name == QLatin1String("target_id")) {
            d_ptr->mTarget_id = val.value().value<qint64>();
            d_ptr->mTarget_id_nil = false;
        }
    }
}

TNS__RelationshipData::TNS__RelationshipData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__RelationshipData::~TNS__RelationshipData()
{
}

TNS__RelationshipData::TNS__RelationshipData( const TNS__RelationshipData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__RelationshipData&  TNS__RelationshipData::operator=( const TNS__RelationshipData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CustomFieldLinkForProjectDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__CustomFieldLinkForProjectData > mItems;
};

void TNS__CustomFieldLinkForProjectDataArray::setItems( const QList< TNS__CustomFieldLinkForProjectData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__CustomFieldLinkForProjectData > TNS__CustomFieldLinkForProjectDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__CustomFieldLinkForProjectDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldLinkForProjectDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldLinkForProjectData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__CustomFieldLinkForProjectDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__CustomFieldLinkForProjectData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__CustomFieldLinkForProjectDataArray::TNS__CustomFieldLinkForProjectDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CustomFieldLinkForProjectDataArray::~TNS__CustomFieldLinkForProjectDataArray()
{
}

TNS__CustomFieldLinkForProjectDataArray::TNS__CustomFieldLinkForProjectDataArray( const TNS__CustomFieldLinkForProjectDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CustomFieldLinkForProjectDataArray&  TNS__CustomFieldLinkForProjectDataArray::operator=( const TNS__CustomFieldLinkForProjectDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CustomFieldLinkForProjectData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    TNS__ObjectRef mField;
    bool mField_nil;
    signed char mSequence;
    bool mSequence_nil;
};

TNS__CustomFieldLinkForProjectData::PrivateDPtr::PrivateDPtr()
    : mField_nil(true), mSequence(0), mSequence_nil(true)
{
}


void TNS__CustomFieldLinkForProjectData::setField( const TNS__ObjectRef& _field )
{
    d_ptr->mField_nil = false;
    d_ptr->mField = _field;
}

TNS__ObjectRef TNS__CustomFieldLinkForProjectData::field() const
{
    return d_ptr->mField;
}

void TNS__CustomFieldLinkForProjectData::setSequence( signed char _sequence )
{
    d_ptr->mSequence_nil = false;
    d_ptr->mSequence = _sequence;
}

signed char TNS__CustomFieldLinkForProjectData::sequence() const
{
    return d_ptr->mSequence;
}

KDSoapValue TNS__CustomFieldLinkForProjectData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldLinkForProjectData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mField_nil) {
        KDSoapValue _valueField(d_ptr->mField.serialize(QString::fromLatin1("field")));
        _valueField.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueField.isNil())
        args.append(_valueField);
    }
    if (!d_ptr->mSequence_nil) {
        KDSoapValue _valueSequence(QString::fromLatin1("sequence"), QVariant::fromValue(d_ptr->mSequence), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("byte"));
        _valueSequence.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSequence.isNil())
        args.append(_valueSequence);
    }
    return mainValue;
}

void TNS__CustomFieldLinkForProjectData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("field")) {
            d_ptr->mField.deserialize(val);
        }
        else if (_name == QLatin1String("sequence")) {
            d_ptr->mSequence = val.value().value<signed char>();
            d_ptr->mSequence_nil = false;
        }
    }
}

TNS__CustomFieldLinkForProjectData::TNS__CustomFieldLinkForProjectData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CustomFieldLinkForProjectData::~TNS__CustomFieldLinkForProjectData()
{
}

TNS__CustomFieldLinkForProjectData::TNS__CustomFieldLinkForProjectData( const TNS__CustomFieldLinkForProjectData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CustomFieldLinkForProjectData&  TNS__CustomFieldLinkForProjectData::operator=( const TNS__CustomFieldLinkForProjectData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__AccountDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__AccountData > mItems;
};

void TNS__AccountDataArray::setItems( const QList< TNS__AccountData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__AccountData > TNS__AccountDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__AccountDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("AccountDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("AccountData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__AccountDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__AccountData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__AccountDataArray::TNS__AccountDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__AccountDataArray::~TNS__AccountDataArray()
{
}

TNS__AccountDataArray::TNS__AccountDataArray( const TNS__AccountDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__AccountDataArray&  TNS__AccountDataArray::operator=( const TNS__AccountDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ObjectRefArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__ObjectRef > mItems;
};

void TNS__ObjectRefArray::setItems( const QList< TNS__ObjectRef >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__ObjectRef > TNS__ObjectRefArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__ObjectRefArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ObjectRefArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ObjectRef"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__ObjectRefArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__ObjectRef mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__ObjectRefArray::TNS__ObjectRefArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ObjectRefArray::~TNS__ObjectRefArray()
{
}

TNS__ObjectRefArray::TNS__ObjectRefArray( const TNS__ObjectRefArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ObjectRefArray&  TNS__ObjectRefArray::operator=( const TNS__ObjectRefArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__IssueDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__IssueData > mItems;
};

void TNS__IssueDataArray::setItems( const QList< TNS__IssueData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__IssueData > TNS__IssueDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__IssueDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__IssueDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__IssueData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__IssueDataArray::TNS__IssueDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__IssueDataArray::~TNS__IssueDataArray()
{
}

TNS__IssueDataArray::TNS__IssueDataArray( const TNS__IssueDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__IssueDataArray&  TNS__IssueDataArray::operator=( const TNS__IssueDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CustomFieldDefinitionDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__CustomFieldDefinitionData > mItems;
};

void TNS__CustomFieldDefinitionDataArray::setItems( const QList< TNS__CustomFieldDefinitionData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__CustomFieldDefinitionData > TNS__CustomFieldDefinitionDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__CustomFieldDefinitionDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldDefinitionDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldDefinitionData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__CustomFieldDefinitionDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__CustomFieldDefinitionData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__CustomFieldDefinitionDataArray::TNS__CustomFieldDefinitionDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CustomFieldDefinitionDataArray::~TNS__CustomFieldDefinitionDataArray()
{
}

TNS__CustomFieldDefinitionDataArray::TNS__CustomFieldDefinitionDataArray( const TNS__CustomFieldDefinitionDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CustomFieldDefinitionDataArray&  TNS__CustomFieldDefinitionDataArray::operator=( const TNS__CustomFieldDefinitionDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ProjectDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__ProjectData > mItems;
};

void TNS__ProjectDataArray::setItems( const QList< TNS__ProjectData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__ProjectData > TNS__ProjectDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__ProjectDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__ProjectDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__ProjectData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__ProjectDataArray::TNS__ProjectDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ProjectDataArray::~TNS__ProjectDataArray()
{
}

TNS__ProjectDataArray::TNS__ProjectDataArray( const TNS__ProjectDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ProjectDataArray&  TNS__ProjectDataArray::operator=( const TNS__ProjectDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__IssueNoteDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__IssueNoteData > mItems;
};

void TNS__IssueNoteDataArray::setItems( const QList< TNS__IssueNoteData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__IssueNoteData > TNS__IssueNoteDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__IssueNoteDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueNoteDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueNoteData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__IssueNoteDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__IssueNoteData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__IssueNoteDataArray::TNS__IssueNoteDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__IssueNoteDataArray::~TNS__IssueNoteDataArray()
{
}

TNS__IssueNoteDataArray::TNS__IssueNoteDataArray( const TNS__IssueNoteDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__IssueNoteDataArray&  TNS__IssueNoteDataArray::operator=( const TNS__IssueNoteDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__AccountData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    QString mName;
    bool mName_nil;
    QString mReal_name;
    bool mReal_name_nil;
    QString mEmail;
    bool mEmail_nil;
};

TNS__AccountData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mName_nil(true), mReal_name_nil(true), mEmail_nil(true)
{
}


void TNS__AccountData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__AccountData::id() const
{
    return d_ptr->mId;
}

void TNS__AccountData::setName( const QString& _name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = _name;
}

QString TNS__AccountData::name() const
{
    return d_ptr->mName;
}

void TNS__AccountData::setReal_name( const QString& _real_name )
{
    d_ptr->mReal_name_nil = false;
    d_ptr->mReal_name = _real_name;
}

QString TNS__AccountData::real_name() const
{
    return d_ptr->mReal_name;
}

void TNS__AccountData::setEmail( const QString& _email )
{
    d_ptr->mEmail_nil = false;
    d_ptr->mEmail = _email;
}

QString TNS__AccountData::email() const
{
    return d_ptr->mEmail;
}

KDSoapValue TNS__AccountData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("AccountData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueName.isNil())
        args.append(_valueName);
    }
    if (!d_ptr->mReal_name_nil) {
        KDSoapValue _valueReal_name(QString::fromLatin1("real_name"), QVariant::fromValue(d_ptr->mReal_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueReal_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueReal_name.isNil())
        args.append(_valueReal_name);
    }
    if (!d_ptr->mEmail_nil) {
        KDSoapValue _valueEmail(QString::fromLatin1("email"), QVariant::fromValue(d_ptr->mEmail), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueEmail.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueEmail.isNil())
        args.append(_valueEmail);
    }
    return mainValue;
}

void TNS__AccountData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("name")) {
            d_ptr->mName = val.value().value<QString>();
            d_ptr->mName_nil = false;
        }
        else if (_name == QLatin1String("real_name")) {
            d_ptr->mReal_name = val.value().value<QString>();
            d_ptr->mReal_name_nil = false;
        }
        else if (_name == QLatin1String("email")) {
            d_ptr->mEmail = val.value().value<QString>();
            d_ptr->mEmail_nil = false;
        }
    }
}

TNS__AccountData::TNS__AccountData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__AccountData::~TNS__AccountData()
{
}

TNS__AccountData::TNS__AccountData( const TNS__AccountData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__AccountData&  TNS__AccountData::operator=( const TNS__AccountData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ObjectRef::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    QString mName;
    bool mName_nil;
};

TNS__ObjectRef::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mName_nil(true)
{
}


void TNS__ObjectRef::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__ObjectRef::id() const
{
    return d_ptr->mId;
}

void TNS__ObjectRef::setName( const QString& _name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = _name;
}

QString TNS__ObjectRef::name() const
{
    return d_ptr->mName;
}

KDSoapValue TNS__ObjectRef::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ObjectRef"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueName.isNil())
        args.append(_valueName);
    }
    return mainValue;
}

void TNS__ObjectRef::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("name")) {
            d_ptr->mName = val.value().value<QString>();
            d_ptr->mName_nil = false;
        }
    }
}

TNS__ObjectRef::TNS__ObjectRef()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ObjectRef::~TNS__ObjectRef()
{
}

TNS__ObjectRef::TNS__ObjectRef( const TNS__ObjectRef& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ObjectRef&  TNS__ObjectRef::operator=( const TNS__ObjectRef& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CustomFieldDefinitionData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    TNS__ObjectRef mField;
    bool mField_nil;
    qint64 mType;
    bool mType_nil;
    QString mPossible_values;
    bool mPossible_values_nil;
    QString mDefault_value;
    bool mDefault_value_nil;
    QString mValid_regexp;
    bool mValid_regexp_nil;
    qint64 mAccess_level_r;
    bool mAccess_level_r_nil;
    qint64 mAccess_level_rw;
    bool mAccess_level_rw_nil;
    qint64 mLength_min;
    bool mLength_min_nil;
    qint64 mLength_max;
    bool mLength_max_nil;
    bool mAdvanced;
    bool mAdvanced_nil;
    bool mDisplay_report;
    bool mDisplay_report_nil;
    bool mDisplay_update;
    bool mDisplay_update_nil;
    bool mDisplay_resolved;
    bool mDisplay_resolved_nil;
    bool mDisplay_closed;
    bool mDisplay_closed_nil;
    bool mRequire_report;
    bool mRequire_report_nil;
    bool mRequire_update;
    bool mRequire_update_nil;
    bool mRequire_resolved;
    bool mRequire_resolved_nil;
    bool mRequire_closed;
    bool mRequire_closed_nil;
};

TNS__CustomFieldDefinitionData::PrivateDPtr::PrivateDPtr()
    : mField_nil(true), mType(0), mType_nil(true), mPossible_values_nil(true), mDefault_value_nil(true), mValid_regexp_nil(true), mAccess_level_r(0), mAccess_level_r_nil(true), mAccess_level_rw(0), mAccess_level_rw_nil(true), mLength_min(0), mLength_min_nil(true), mLength_max(0), mLength_max_nil(true), mAdvanced(false), mAdvanced_nil(true), mDisplay_report(false), mDisplay_report_nil(true), mDisplay_update(false), mDisplay_update_nil(true), mDisplay_resolved(false), mDisplay_resolved_nil(true), mDisplay_closed(false), mDisplay_closed_nil(true), mRequire_report(false), mRequire_report_nil(true), mRequire_update(false), mRequire_update_nil(true), mRequire_resolved(false), mRequire_resolved_nil(true), mRequire_closed(false), mRequire_closed_nil(true)
{
}


void TNS__CustomFieldDefinitionData::setField( const TNS__ObjectRef& _field )
{
    d_ptr->mField_nil = false;
    d_ptr->mField = _field;
}

TNS__ObjectRef TNS__CustomFieldDefinitionData::field() const
{
    return d_ptr->mField;
}

void TNS__CustomFieldDefinitionData::setType( qint64 _type )
{
    d_ptr->mType_nil = false;
    d_ptr->mType = _type;
}

qint64 TNS__CustomFieldDefinitionData::type() const
{
    return d_ptr->mType;
}

void TNS__CustomFieldDefinitionData::setPossible_values( const QString& _possible_values )
{
    d_ptr->mPossible_values_nil = false;
    d_ptr->mPossible_values = _possible_values;
}

QString TNS__CustomFieldDefinitionData::possible_values() const
{
    return d_ptr->mPossible_values;
}

void TNS__CustomFieldDefinitionData::setDefault_value( const QString& _default_value )
{
    d_ptr->mDefault_value_nil = false;
    d_ptr->mDefault_value = _default_value;
}

QString TNS__CustomFieldDefinitionData::default_value() const
{
    return d_ptr->mDefault_value;
}

void TNS__CustomFieldDefinitionData::setValid_regexp( const QString& _valid_regexp )
{
    d_ptr->mValid_regexp_nil = false;
    d_ptr->mValid_regexp = _valid_regexp;
}

QString TNS__CustomFieldDefinitionData::valid_regexp() const
{
    return d_ptr->mValid_regexp;
}

void TNS__CustomFieldDefinitionData::setAccess_level_r( qint64 _access_level_r )
{
    d_ptr->mAccess_level_r_nil = false;
    d_ptr->mAccess_level_r = _access_level_r;
}

qint64 TNS__CustomFieldDefinitionData::access_level_r() const
{
    return d_ptr->mAccess_level_r;
}

void TNS__CustomFieldDefinitionData::setAccess_level_rw( qint64 _access_level_rw )
{
    d_ptr->mAccess_level_rw_nil = false;
    d_ptr->mAccess_level_rw = _access_level_rw;
}

qint64 TNS__CustomFieldDefinitionData::access_level_rw() const
{
    return d_ptr->mAccess_level_rw;
}

void TNS__CustomFieldDefinitionData::setLength_min( qint64 _length_min )
{
    d_ptr->mLength_min_nil = false;
    d_ptr->mLength_min = _length_min;
}

qint64 TNS__CustomFieldDefinitionData::length_min() const
{
    return d_ptr->mLength_min;
}

void TNS__CustomFieldDefinitionData::setLength_max( qint64 _length_max )
{
    d_ptr->mLength_max_nil = false;
    d_ptr->mLength_max = _length_max;
}

qint64 TNS__CustomFieldDefinitionData::length_max() const
{
    return d_ptr->mLength_max;
}

void TNS__CustomFieldDefinitionData::setAdvanced( bool _advanced )
{
    d_ptr->mAdvanced_nil = false;
    d_ptr->mAdvanced = _advanced;
}

bool TNS__CustomFieldDefinitionData::advanced() const
{
    return d_ptr->mAdvanced;
}

void TNS__CustomFieldDefinitionData::setDisplay_report( bool _display_report )
{
    d_ptr->mDisplay_report_nil = false;
    d_ptr->mDisplay_report = _display_report;
}

bool TNS__CustomFieldDefinitionData::display_report() const
{
    return d_ptr->mDisplay_report;
}

void TNS__CustomFieldDefinitionData::setDisplay_update( bool _display_update )
{
    d_ptr->mDisplay_update_nil = false;
    d_ptr->mDisplay_update = _display_update;
}

bool TNS__CustomFieldDefinitionData::display_update() const
{
    return d_ptr->mDisplay_update;
}

void TNS__CustomFieldDefinitionData::setDisplay_resolved( bool _display_resolved )
{
    d_ptr->mDisplay_resolved_nil = false;
    d_ptr->mDisplay_resolved = _display_resolved;
}

bool TNS__CustomFieldDefinitionData::display_resolved() const
{
    return d_ptr->mDisplay_resolved;
}

void TNS__CustomFieldDefinitionData::setDisplay_closed( bool _display_closed )
{
    d_ptr->mDisplay_closed_nil = false;
    d_ptr->mDisplay_closed = _display_closed;
}

bool TNS__CustomFieldDefinitionData::display_closed() const
{
    return d_ptr->mDisplay_closed;
}

void TNS__CustomFieldDefinitionData::setRequire_report( bool _require_report )
{
    d_ptr->mRequire_report_nil = false;
    d_ptr->mRequire_report = _require_report;
}

bool TNS__CustomFieldDefinitionData::require_report() const
{
    return d_ptr->mRequire_report;
}

void TNS__CustomFieldDefinitionData::setRequire_update( bool _require_update )
{
    d_ptr->mRequire_update_nil = false;
    d_ptr->mRequire_update = _require_update;
}

bool TNS__CustomFieldDefinitionData::require_update() const
{
    return d_ptr->mRequire_update;
}

void TNS__CustomFieldDefinitionData::setRequire_resolved( bool _require_resolved )
{
    d_ptr->mRequire_resolved_nil = false;
    d_ptr->mRequire_resolved = _require_resolved;
}

bool TNS__CustomFieldDefinitionData::require_resolved() const
{
    return d_ptr->mRequire_resolved;
}

void TNS__CustomFieldDefinitionData::setRequire_closed( bool _require_closed )
{
    d_ptr->mRequire_closed_nil = false;
    d_ptr->mRequire_closed = _require_closed;
}

bool TNS__CustomFieldDefinitionData::require_closed() const
{
    return d_ptr->mRequire_closed;
}

KDSoapValue TNS__CustomFieldDefinitionData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldDefinitionData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mField_nil) {
        KDSoapValue _valueField(d_ptr->mField.serialize(QString::fromLatin1("field")));
        _valueField.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueField.isNil())
        args.append(_valueField);
    }
    if (!d_ptr->mType_nil) {
        KDSoapValue _valueType(QString::fromLatin1("type"), QVariant::fromValue(d_ptr->mType), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueType.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueType.isNil())
        args.append(_valueType);
    }
    if (!d_ptr->mPossible_values_nil) {
        KDSoapValue _valuePossible_values(QString::fromLatin1("possible_values"), QVariant::fromValue(d_ptr->mPossible_values), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valuePossible_values.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valuePossible_values.isNil())
        args.append(_valuePossible_values);
    }
    if (!d_ptr->mDefault_value_nil) {
        KDSoapValue _valueDefault_value(QString::fromLatin1("default_value"), QVariant::fromValue(d_ptr->mDefault_value), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueDefault_value.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDefault_value.isNil())
        args.append(_valueDefault_value);
    }
    if (!d_ptr->mValid_regexp_nil) {
        KDSoapValue _valueValid_regexp(QString::fromLatin1("valid_regexp"), QVariant::fromValue(d_ptr->mValid_regexp), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueValid_regexp.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueValid_regexp.isNil())
        args.append(_valueValid_regexp);
    }
    if (!d_ptr->mAccess_level_r_nil) {
        KDSoapValue _valueAccess_level_r(QString::fromLatin1("access_level_r"), QVariant::fromValue(d_ptr->mAccess_level_r), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueAccess_level_r.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueAccess_level_r.isNil())
        args.append(_valueAccess_level_r);
    }
    if (!d_ptr->mAccess_level_rw_nil) {
        KDSoapValue _valueAccess_level_rw(QString::fromLatin1("access_level_rw"), QVariant::fromValue(d_ptr->mAccess_level_rw), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueAccess_level_rw.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueAccess_level_rw.isNil())
        args.append(_valueAccess_level_rw);
    }
    if (!d_ptr->mLength_min_nil) {
        KDSoapValue _valueLength_min(QString::fromLatin1("length_min"), QVariant::fromValue(d_ptr->mLength_min), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueLength_min.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueLength_min.isNil())
        args.append(_valueLength_min);
    }
    if (!d_ptr->mLength_max_nil) {
        KDSoapValue _valueLength_max(QString::fromLatin1("length_max"), QVariant::fromValue(d_ptr->mLength_max), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueLength_max.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueLength_max.isNil())
        args.append(_valueLength_max);
    }
    if (!d_ptr->mAdvanced_nil) {
        KDSoapValue _valueAdvanced(QString::fromLatin1("advanced"), QVariant::fromValue(d_ptr->mAdvanced), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueAdvanced.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueAdvanced.isNil())
        args.append(_valueAdvanced);
    }
    if (!d_ptr->mDisplay_report_nil) {
        KDSoapValue _valueDisplay_report(QString::fromLatin1("display_report"), QVariant::fromValue(d_ptr->mDisplay_report), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueDisplay_report.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDisplay_report.isNil())
        args.append(_valueDisplay_report);
    }
    if (!d_ptr->mDisplay_update_nil) {
        KDSoapValue _valueDisplay_update(QString::fromLatin1("display_update"), QVariant::fromValue(d_ptr->mDisplay_update), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueDisplay_update.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDisplay_update.isNil())
        args.append(_valueDisplay_update);
    }
    if (!d_ptr->mDisplay_resolved_nil) {
        KDSoapValue _valueDisplay_resolved(QString::fromLatin1("display_resolved"), QVariant::fromValue(d_ptr->mDisplay_resolved), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueDisplay_resolved.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDisplay_resolved.isNil())
        args.append(_valueDisplay_resolved);
    }
    if (!d_ptr->mDisplay_closed_nil) {
        KDSoapValue _valueDisplay_closed(QString::fromLatin1("display_closed"), QVariant::fromValue(d_ptr->mDisplay_closed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueDisplay_closed.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDisplay_closed.isNil())
        args.append(_valueDisplay_closed);
    }
    if (!d_ptr->mRequire_report_nil) {
        KDSoapValue _valueRequire_report(QString::fromLatin1("require_report"), QVariant::fromValue(d_ptr->mRequire_report), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueRequire_report.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueRequire_report.isNil())
        args.append(_valueRequire_report);
    }
    if (!d_ptr->mRequire_update_nil) {
        KDSoapValue _valueRequire_update(QString::fromLatin1("require_update"), QVariant::fromValue(d_ptr->mRequire_update), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueRequire_update.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueRequire_update.isNil())
        args.append(_valueRequire_update);
    }
    if (!d_ptr->mRequire_resolved_nil) {
        KDSoapValue _valueRequire_resolved(QString::fromLatin1("require_resolved"), QVariant::fromValue(d_ptr->mRequire_resolved), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueRequire_resolved.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueRequire_resolved.isNil())
        args.append(_valueRequire_resolved);
    }
    if (!d_ptr->mRequire_closed_nil) {
        KDSoapValue _valueRequire_closed(QString::fromLatin1("require_closed"), QVariant::fromValue(d_ptr->mRequire_closed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueRequire_closed.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueRequire_closed.isNil())
        args.append(_valueRequire_closed);
    }
    return mainValue;
}

void TNS__CustomFieldDefinitionData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("field")) {
            d_ptr->mField.deserialize(val);
        }
        else if (_name == QLatin1String("type")) {
            d_ptr->mType = val.value().value<qint64>();
            d_ptr->mType_nil = false;
        }
        else if (_name == QLatin1String("possible_values")) {
            d_ptr->mPossible_values = val.value().value<QString>();
            d_ptr->mPossible_values_nil = false;
        }
        else if (_name == QLatin1String("default_value")) {
            d_ptr->mDefault_value = val.value().value<QString>();
            d_ptr->mDefault_value_nil = false;
        }
        else if (_name == QLatin1String("valid_regexp")) {
            d_ptr->mValid_regexp = val.value().value<QString>();
            d_ptr->mValid_regexp_nil = false;
        }
        else if (_name == QLatin1String("access_level_r")) {
            d_ptr->mAccess_level_r = val.value().value<qint64>();
            d_ptr->mAccess_level_r_nil = false;
        }
        else if (_name == QLatin1String("access_level_rw")) {
            d_ptr->mAccess_level_rw = val.value().value<qint64>();
            d_ptr->mAccess_level_rw_nil = false;
        }
        else if (_name == QLatin1String("length_min")) {
            d_ptr->mLength_min = val.value().value<qint64>();
            d_ptr->mLength_min_nil = false;
        }
        else if (_name == QLatin1String("length_max")) {
            d_ptr->mLength_max = val.value().value<qint64>();
            d_ptr->mLength_max_nil = false;
        }
        else if (_name == QLatin1String("advanced")) {
            d_ptr->mAdvanced = val.value().value<bool>();
            d_ptr->mAdvanced_nil = false;
        }
        else if (_name == QLatin1String("display_report")) {
            d_ptr->mDisplay_report = val.value().value<bool>();
            d_ptr->mDisplay_report_nil = false;
        }
        else if (_name == QLatin1String("display_update")) {
            d_ptr->mDisplay_update = val.value().value<bool>();
            d_ptr->mDisplay_update_nil = false;
        }
        else if (_name == QLatin1String("display_resolved")) {
            d_ptr->mDisplay_resolved = val.value().value<bool>();
            d_ptr->mDisplay_resolved_nil = false;
        }
        else if (_name == QLatin1String("display_closed")) {
            d_ptr->mDisplay_closed = val.value().value<bool>();
            d_ptr->mDisplay_closed_nil = false;
        }
        else if (_name == QLatin1String("require_report")) {
            d_ptr->mRequire_report = val.value().value<bool>();
            d_ptr->mRequire_report_nil = false;
        }
        else if (_name == QLatin1String("require_update")) {
            d_ptr->mRequire_update = val.value().value<bool>();
            d_ptr->mRequire_update_nil = false;
        }
        else if (_name == QLatin1String("require_resolved")) {
            d_ptr->mRequire_resolved = val.value().value<bool>();
            d_ptr->mRequire_resolved_nil = false;
        }
        else if (_name == QLatin1String("require_closed")) {
            d_ptr->mRequire_closed = val.value().value<bool>();
            d_ptr->mRequire_closed_nil = false;
        }
    }
}

TNS__CustomFieldDefinitionData::TNS__CustomFieldDefinitionData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CustomFieldDefinitionData::~TNS__CustomFieldDefinitionData()
{
}

TNS__CustomFieldDefinitionData::TNS__CustomFieldDefinitionData( const TNS__CustomFieldDefinitionData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CustomFieldDefinitionData&  TNS__CustomFieldDefinitionData::operator=( const TNS__CustomFieldDefinitionData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__FilterDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__FilterData > mItems;
};

void TNS__FilterDataArray::setItems( const QList< TNS__FilterData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__FilterData > TNS__FilterDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__FilterDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("FilterDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("FilterData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__FilterDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__FilterData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__FilterDataArray::TNS__FilterDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__FilterDataArray::~TNS__FilterDataArray()
{
}

TNS__FilterDataArray::TNS__FilterDataArray( const TNS__FilterDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__FilterDataArray&  TNS__FilterDataArray::operator=( const TNS__FilterDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__RelationshipDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__RelationshipData > mItems;
};

void TNS__RelationshipDataArray::setItems( const QList< TNS__RelationshipData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__RelationshipData > TNS__RelationshipDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__RelationshipDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("RelationshipDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("RelationshipData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__RelationshipDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__RelationshipData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__RelationshipDataArray::TNS__RelationshipDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__RelationshipDataArray::~TNS__RelationshipDataArray()
{
}

TNS__RelationshipDataArray::TNS__RelationshipDataArray( const TNS__RelationshipDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__RelationshipDataArray&  TNS__RelationshipDataArray::operator=( const TNS__RelationshipDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ProjectVersionData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    QString mName;
    bool mName_nil;
    qint64 mProject_id;
    bool mProject_id_nil;
    KDDateTime mDate_order;
    bool mDate_order_nil;
    QString mDescription;
    bool mDescription_nil;
    bool mReleased;
    bool mReleased_nil;
};

TNS__ProjectVersionData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mName_nil(true), mProject_id(0), mProject_id_nil(true), mDate_order_nil(true), mDescription_nil(true), mReleased(false), mReleased_nil(true)
{
}


void TNS__ProjectVersionData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__ProjectVersionData::id() const
{
    return d_ptr->mId;
}

void TNS__ProjectVersionData::setName( const QString& _name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = _name;
}

QString TNS__ProjectVersionData::name() const
{
    return d_ptr->mName;
}

void TNS__ProjectVersionData::setProject_id( qint64 _project_id )
{
    d_ptr->mProject_id_nil = false;
    d_ptr->mProject_id = _project_id;
}

qint64 TNS__ProjectVersionData::project_id() const
{
    return d_ptr->mProject_id;
}

void TNS__ProjectVersionData::setDate_order( const KDDateTime& _date_order )
{
    d_ptr->mDate_order_nil = false;
    d_ptr->mDate_order = _date_order;
}

KDDateTime TNS__ProjectVersionData::date_order() const
{
    return d_ptr->mDate_order;
}

void TNS__ProjectVersionData::setDescription( const QString& _description )
{
    d_ptr->mDescription_nil = false;
    d_ptr->mDescription = _description;
}

QString TNS__ProjectVersionData::description() const
{
    return d_ptr->mDescription;
}

void TNS__ProjectVersionData::setReleased( bool _released )
{
    d_ptr->mReleased_nil = false;
    d_ptr->mReleased = _released;
}

bool TNS__ProjectVersionData::released() const
{
    return d_ptr->mReleased;
}

KDSoapValue TNS__ProjectVersionData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectVersionData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueName.isNil())
        args.append(_valueName);
    }
    if (!d_ptr->mProject_id_nil) {
        KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(d_ptr->mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueProject_id.isNil())
        args.append(_valueProject_id);
    }
    if (!d_ptr->mDate_order_nil) {
        KDSoapValue _valueDate_order(QString::fromLatin1("date_order"), d_ptr->mDate_order.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueDate_order.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDate_order.isNil())
        args.append(_valueDate_order);
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDescription.isNil())
        args.append(_valueDescription);
    }
    if (!d_ptr->mReleased_nil) {
        KDSoapValue _valueReleased(QString::fromLatin1("released"), QVariant::fromValue(d_ptr->mReleased), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueReleased.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueReleased.isNil())
        args.append(_valueReleased);
    }
    return mainValue;
}

void TNS__ProjectVersionData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("name")) {
            d_ptr->mName = val.value().value<QString>();
            d_ptr->mName_nil = false;
        }
        else if (_name == QLatin1String("project_id")) {
            d_ptr->mProject_id = val.value().value<qint64>();
            d_ptr->mProject_id_nil = false;
        }
        else if (_name == QLatin1String("date_order")) {
            d_ptr->mDate_order = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mDate_order_nil = false;
        }
        else if (_name == QLatin1String("description")) {
            d_ptr->mDescription = val.value().value<QString>();
            d_ptr->mDescription_nil = false;
        }
        else if (_name == QLatin1String("released")) {
            d_ptr->mReleased = val.value().value<bool>();
            d_ptr->mReleased_nil = false;
        }
    }
}

TNS__ProjectVersionData::TNS__ProjectVersionData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ProjectVersionData::~TNS__ProjectVersionData()
{
}

TNS__ProjectVersionData::TNS__ProjectVersionData( const TNS__ProjectVersionData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ProjectVersionData&  TNS__ProjectVersionData::operator=( const TNS__ProjectVersionData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__IssueHeaderDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__IssueHeaderData > mItems;
};

void TNS__IssueHeaderDataArray::setItems( const QList< TNS__IssueHeaderData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__IssueHeaderData > TNS__IssueHeaderDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__IssueHeaderDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueHeaderDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueHeaderData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__IssueHeaderDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__IssueHeaderData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__IssueHeaderDataArray::TNS__IssueHeaderDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__IssueHeaderDataArray::~TNS__IssueHeaderDataArray()
{
}

TNS__IssueHeaderDataArray::TNS__IssueHeaderDataArray( const TNS__IssueHeaderDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__IssueHeaderDataArray&  TNS__IssueHeaderDataArray::operator=( const TNS__IssueHeaderDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__AttachmentDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__AttachmentData > mItems;
};

void TNS__AttachmentDataArray::setItems( const QList< TNS__AttachmentData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__AttachmentData > TNS__AttachmentDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__AttachmentDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("AttachmentDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("AttachmentData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__AttachmentDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__AttachmentData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__AttachmentDataArray::TNS__AttachmentDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__AttachmentDataArray::~TNS__AttachmentDataArray()
{
}

TNS__AttachmentDataArray::TNS__AttachmentDataArray( const TNS__AttachmentDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__AttachmentDataArray&  TNS__AttachmentDataArray::operator=( const TNS__AttachmentDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__CustomFieldValueForIssueData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    TNS__ObjectRef mField;
    bool mField_nil;
    QString mValue;
    bool mValue_nil;
};

TNS__CustomFieldValueForIssueData::PrivateDPtr::PrivateDPtr()
    : mField_nil(true), mValue_nil(true)
{
}


void TNS__CustomFieldValueForIssueData::setField( const TNS__ObjectRef& _field )
{
    d_ptr->mField_nil = false;
    d_ptr->mField = _field;
}

TNS__ObjectRef TNS__CustomFieldValueForIssueData::field() const
{
    return d_ptr->mField;
}

void TNS__CustomFieldValueForIssueData::setValue( const QString& _value )
{
    d_ptr->mValue_nil = false;
    d_ptr->mValue = _value;
}

QString TNS__CustomFieldValueForIssueData::value() const
{
    return d_ptr->mValue;
}

KDSoapValue TNS__CustomFieldValueForIssueData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("CustomFieldValueForIssueData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mField_nil) {
        KDSoapValue _valueField(d_ptr->mField.serialize(QString::fromLatin1("field")));
        _valueField.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueField.isNil())
        args.append(_valueField);
    }
    if (!d_ptr->mValue_nil) {
        KDSoapValue _valueValue(QString::fromLatin1("value"), QVariant::fromValue(d_ptr->mValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueValue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueValue.isNil())
        args.append(_valueValue);
    }
    return mainValue;
}

void TNS__CustomFieldValueForIssueData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("field")) {
            d_ptr->mField.deserialize(val);
        }
        else if (_name == QLatin1String("value")) {
            d_ptr->mValue = val.value().value<QString>();
            d_ptr->mValue_nil = false;
        }
    }
}

TNS__CustomFieldValueForIssueData::TNS__CustomFieldValueForIssueData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__CustomFieldValueForIssueData::~TNS__CustomFieldValueForIssueData()
{
}

TNS__CustomFieldValueForIssueData::TNS__CustomFieldValueForIssueData( const TNS__CustomFieldValueForIssueData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__CustomFieldValueForIssueData&  TNS__CustomFieldValueForIssueData::operator=( const TNS__CustomFieldValueForIssueData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ProjectVersionDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__ProjectVersionData > mItems;
};

void TNS__ProjectVersionDataArray::setItems( const QList< TNS__ProjectVersionData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__ProjectVersionData > TNS__ProjectVersionDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__ProjectVersionDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectVersionDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectVersionData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__ProjectVersionDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__ProjectVersionData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__ProjectVersionDataArray::TNS__ProjectVersionDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ProjectVersionDataArray::~TNS__ProjectVersionDataArray()
{
}

TNS__ProjectVersionDataArray::TNS__ProjectVersionDataArray( const TNS__ProjectVersionDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ProjectVersionDataArray&  TNS__ProjectVersionDataArray::operator=( const TNS__ProjectVersionDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__IssueData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    TNS__ObjectRef mView_state;
    bool mView_state_nil;
    KDDateTime mLast_updated;
    bool mLast_updated_nil;
    TNS__ObjectRef mProject;
    bool mProject_nil;
    QString mCategory;
    bool mCategory_nil;
    TNS__ObjectRef mPriority;
    bool mPriority_nil;
    TNS__ObjectRef mSeverity;
    bool mSeverity_nil;
    TNS__ObjectRef mStatus;
    bool mStatus_nil;
    TNS__AccountData mReporter;
    bool mReporter_nil;
    QString mSummary;
    bool mSummary_nil;
    QString mVersion;
    bool mVersion_nil;
    QString mBuild;
    bool mBuild_nil;
    QString mPlatform;
    bool mPlatform_nil;
    QString mOs;
    bool mOs_nil;
    QString mOs_build;
    bool mOs_build_nil;
    TNS__ObjectRef mReproducibility;
    bool mReproducibility_nil;
    KDDateTime mDate_submitted;
    bool mDate_submitted_nil;
    qint64 mSponsorship_total;
    bool mSponsorship_total_nil;
    TNS__AccountData mHandler;
    bool mHandler_nil;
    TNS__ObjectRef mProjection;
    bool mProjection_nil;
    TNS__ObjectRef mEta;
    bool mEta_nil;
    TNS__ObjectRef mResolution;
    bool mResolution_nil;
    QString mFixed_in_version;
    bool mFixed_in_version_nil;
    QString mTarget_version;
    bool mTarget_version_nil;
    QString mDescription;
    bool mDescription_nil;
    QString mSteps_to_reproduce;
    bool mSteps_to_reproduce_nil;
    QString mAdditional_information;
    bool mAdditional_information_nil;
    TNS__AttachmentDataArray mAttachments;
    bool mAttachments_nil;
    TNS__RelationshipDataArray mRelationships;
    bool mRelationships_nil;
    TNS__IssueNoteDataArray mNotes;
    bool mNotes_nil;
    TNS__CustomFieldValueForIssueDataArray mCustom_fields;
    bool mCustom_fields_nil;
    KDDateTime mDue_date;
    bool mDue_date_nil;
    TNS__AccountDataArray mMonitors;
    bool mMonitors_nil;
};

TNS__IssueData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mView_state_nil(true), mLast_updated_nil(true), mProject_nil(true), mCategory_nil(true), mPriority_nil(true), mSeverity_nil(true), mStatus_nil(true), mReporter_nil(true), mSummary_nil(true), mVersion_nil(true), mBuild_nil(true), mPlatform_nil(true), mOs_nil(true), mOs_build_nil(true), mReproducibility_nil(true), mDate_submitted_nil(true), mSponsorship_total(0), mSponsorship_total_nil(true), mHandler_nil(true), mProjection_nil(true), mEta_nil(true), mResolution_nil(true), mFixed_in_version_nil(true), mTarget_version_nil(true), mDescription_nil(true), mSteps_to_reproduce_nil(true), mAdditional_information_nil(true), mAttachments_nil(true), mRelationships_nil(true), mNotes_nil(true), mCustom_fields_nil(true), mDue_date_nil(true), mMonitors_nil(true)
{
}


void TNS__IssueData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__IssueData::id() const
{
    return d_ptr->mId;
}

void TNS__IssueData::setView_state( const TNS__ObjectRef& _view_state )
{
    d_ptr->mView_state_nil = false;
    d_ptr->mView_state = _view_state;
}

TNS__ObjectRef TNS__IssueData::view_state() const
{
    return d_ptr->mView_state;
}

void TNS__IssueData::setLast_updated( const KDDateTime& _last_updated )
{
    d_ptr->mLast_updated_nil = false;
    d_ptr->mLast_updated = _last_updated;
}

KDDateTime TNS__IssueData::last_updated() const
{
    return d_ptr->mLast_updated;
}

void TNS__IssueData::setProject( const TNS__ObjectRef& _project )
{
    d_ptr->mProject_nil = false;
    d_ptr->mProject = _project;
}

TNS__ObjectRef TNS__IssueData::project() const
{
    return d_ptr->mProject;
}

void TNS__IssueData::setCategory( const QString& _category )
{
    d_ptr->mCategory_nil = false;
    d_ptr->mCategory = _category;
}

QString TNS__IssueData::category() const
{
    return d_ptr->mCategory;
}

void TNS__IssueData::setPriority( const TNS__ObjectRef& _priority )
{
    d_ptr->mPriority_nil = false;
    d_ptr->mPriority = _priority;
}

TNS__ObjectRef TNS__IssueData::priority() const
{
    return d_ptr->mPriority;
}

void TNS__IssueData::setSeverity( const TNS__ObjectRef& _severity )
{
    d_ptr->mSeverity_nil = false;
    d_ptr->mSeverity = _severity;
}

TNS__ObjectRef TNS__IssueData::severity() const
{
    return d_ptr->mSeverity;
}

void TNS__IssueData::setStatus( const TNS__ObjectRef& _status )
{
    d_ptr->mStatus_nil = false;
    d_ptr->mStatus = _status;
}

TNS__ObjectRef TNS__IssueData::status() const
{
    return d_ptr->mStatus;
}

void TNS__IssueData::setReporter( const TNS__AccountData& _reporter )
{
    d_ptr->mReporter_nil = false;
    d_ptr->mReporter = _reporter;
}

TNS__AccountData TNS__IssueData::reporter() const
{
    return d_ptr->mReporter;
}

void TNS__IssueData::setSummary( const QString& _summary )
{
    d_ptr->mSummary_nil = false;
    d_ptr->mSummary = _summary;
}

QString TNS__IssueData::summary() const
{
    return d_ptr->mSummary;
}

void TNS__IssueData::setVersion( const QString& _version )
{
    d_ptr->mVersion_nil = false;
    d_ptr->mVersion = _version;
}

QString TNS__IssueData::version() const
{
    return d_ptr->mVersion;
}

void TNS__IssueData::setBuild( const QString& _build )
{
    d_ptr->mBuild_nil = false;
    d_ptr->mBuild = _build;
}

QString TNS__IssueData::build() const
{
    return d_ptr->mBuild;
}

void TNS__IssueData::setPlatform( const QString& _platform )
{
    d_ptr->mPlatform_nil = false;
    d_ptr->mPlatform = _platform;
}

QString TNS__IssueData::platform() const
{
    return d_ptr->mPlatform;
}

void TNS__IssueData::setOs( const QString& _os )
{
    d_ptr->mOs_nil = false;
    d_ptr->mOs = _os;
}

QString TNS__IssueData::os() const
{
    return d_ptr->mOs;
}

void TNS__IssueData::setOs_build( const QString& _os_build )
{
    d_ptr->mOs_build_nil = false;
    d_ptr->mOs_build = _os_build;
}

QString TNS__IssueData::os_build() const
{
    return d_ptr->mOs_build;
}

void TNS__IssueData::setReproducibility( const TNS__ObjectRef& _reproducibility )
{
    d_ptr->mReproducibility_nil = false;
    d_ptr->mReproducibility = _reproducibility;
}

TNS__ObjectRef TNS__IssueData::reproducibility() const
{
    return d_ptr->mReproducibility;
}

void TNS__IssueData::setDate_submitted( const KDDateTime& _date_submitted )
{
    d_ptr->mDate_submitted_nil = false;
    d_ptr->mDate_submitted = _date_submitted;
}

KDDateTime TNS__IssueData::date_submitted() const
{
    return d_ptr->mDate_submitted;
}

void TNS__IssueData::setSponsorship_total( qint64 _sponsorship_total )
{
    d_ptr->mSponsorship_total_nil = false;
    d_ptr->mSponsorship_total = _sponsorship_total;
}

qint64 TNS__IssueData::sponsorship_total() const
{
    return d_ptr->mSponsorship_total;
}

void TNS__IssueData::setHandler( const TNS__AccountData& _handler )
{
    d_ptr->mHandler_nil = false;
    d_ptr->mHandler = _handler;
}

TNS__AccountData TNS__IssueData::handler() const
{
    return d_ptr->mHandler;
}

void TNS__IssueData::setProjection( const TNS__ObjectRef& _projection )
{
    d_ptr->mProjection_nil = false;
    d_ptr->mProjection = _projection;
}

TNS__ObjectRef TNS__IssueData::projection() const
{
    return d_ptr->mProjection;
}

void TNS__IssueData::setEta( const TNS__ObjectRef& _eta )
{
    d_ptr->mEta_nil = false;
    d_ptr->mEta = _eta;
}

TNS__ObjectRef TNS__IssueData::eta() const
{
    return d_ptr->mEta;
}

void TNS__IssueData::setResolution( const TNS__ObjectRef& _resolution )
{
    d_ptr->mResolution_nil = false;
    d_ptr->mResolution = _resolution;
}

TNS__ObjectRef TNS__IssueData::resolution() const
{
    return d_ptr->mResolution;
}

void TNS__IssueData::setFixed_in_version( const QString& _fixed_in_version )
{
    d_ptr->mFixed_in_version_nil = false;
    d_ptr->mFixed_in_version = _fixed_in_version;
}

QString TNS__IssueData::fixed_in_version() const
{
    return d_ptr->mFixed_in_version;
}

void TNS__IssueData::setTarget_version( const QString& _target_version )
{
    d_ptr->mTarget_version_nil = false;
    d_ptr->mTarget_version = _target_version;
}

QString TNS__IssueData::target_version() const
{
    return d_ptr->mTarget_version;
}

void TNS__IssueData::setDescription( const QString& _description )
{
    d_ptr->mDescription_nil = false;
    d_ptr->mDescription = _description;
}

QString TNS__IssueData::description() const
{
    return d_ptr->mDescription;
}

void TNS__IssueData::setSteps_to_reproduce( const QString& _steps_to_reproduce )
{
    d_ptr->mSteps_to_reproduce_nil = false;
    d_ptr->mSteps_to_reproduce = _steps_to_reproduce;
}

QString TNS__IssueData::steps_to_reproduce() const
{
    return d_ptr->mSteps_to_reproduce;
}

void TNS__IssueData::setAdditional_information( const QString& _additional_information )
{
    d_ptr->mAdditional_information_nil = false;
    d_ptr->mAdditional_information = _additional_information;
}

QString TNS__IssueData::additional_information() const
{
    return d_ptr->mAdditional_information;
}

void TNS__IssueData::setAttachments( const TNS__AttachmentDataArray& _attachments )
{
    d_ptr->mAttachments_nil = false;
    d_ptr->mAttachments = _attachments;
}

TNS__AttachmentDataArray TNS__IssueData::attachments() const
{
    return d_ptr->mAttachments;
}

void TNS__IssueData::setRelationships( const TNS__RelationshipDataArray& _relationships )
{
    d_ptr->mRelationships_nil = false;
    d_ptr->mRelationships = _relationships;
}

TNS__RelationshipDataArray TNS__IssueData::relationships() const
{
    return d_ptr->mRelationships;
}

void TNS__IssueData::setNotes( const TNS__IssueNoteDataArray& _notes )
{
    d_ptr->mNotes_nil = false;
    d_ptr->mNotes = _notes;
}

TNS__IssueNoteDataArray TNS__IssueData::notes() const
{
    return d_ptr->mNotes;
}

void TNS__IssueData::setCustom_fields( const TNS__CustomFieldValueForIssueDataArray& _custom_fields )
{
    d_ptr->mCustom_fields_nil = false;
    d_ptr->mCustom_fields = _custom_fields;
}

TNS__CustomFieldValueForIssueDataArray TNS__IssueData::custom_fields() const
{
    return d_ptr->mCustom_fields;
}

void TNS__IssueData::setDue_date( const KDDateTime& _due_date )
{
    d_ptr->mDue_date_nil = false;
    d_ptr->mDue_date = _due_date;
}

KDDateTime TNS__IssueData::due_date() const
{
    return d_ptr->mDue_date;
}

void TNS__IssueData::setMonitors( const TNS__AccountDataArray& _monitors )
{
    d_ptr->mMonitors_nil = false;
    d_ptr->mMonitors = _monitors;
}

TNS__AccountDataArray TNS__IssueData::monitors() const
{
    return d_ptr->mMonitors;
}

KDSoapValue TNS__IssueData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mView_state_nil) {
        KDSoapValue _valueView_state(d_ptr->mView_state.serialize(QString::fromLatin1("view_state")));
        _valueView_state.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueView_state.isNil())
        args.append(_valueView_state);
    }
    if (!d_ptr->mLast_updated_nil) {
        KDSoapValue _valueLast_updated(QString::fromLatin1("last_updated"), d_ptr->mLast_updated.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueLast_updated.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueLast_updated.isNil())
        args.append(_valueLast_updated);
    }
    if (!d_ptr->mProject_nil) {
        KDSoapValue _valueProject(d_ptr->mProject.serialize(QString::fromLatin1("project")));
        _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueProject.isNil())
        args.append(_valueProject);
    }
    if (!d_ptr->mCategory_nil) {
        KDSoapValue _valueCategory(QString::fromLatin1("category"), QVariant::fromValue(d_ptr->mCategory), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueCategory.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueCategory.isNil())
        args.append(_valueCategory);
    }
    if (!d_ptr->mPriority_nil) {
        KDSoapValue _valuePriority(d_ptr->mPriority.serialize(QString::fromLatin1("priority")));
        _valuePriority.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valuePriority.isNil())
        args.append(_valuePriority);
    }
    if (!d_ptr->mSeverity_nil) {
        KDSoapValue _valueSeverity(d_ptr->mSeverity.serialize(QString::fromLatin1("severity")));
        _valueSeverity.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSeverity.isNil())
        args.append(_valueSeverity);
    }
    if (!d_ptr->mStatus_nil) {
        KDSoapValue _valueStatus(d_ptr->mStatus.serialize(QString::fromLatin1("status")));
        _valueStatus.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueStatus.isNil())
        args.append(_valueStatus);
    }
    if (!d_ptr->mReporter_nil) {
        KDSoapValue _valueReporter(d_ptr->mReporter.serialize(QString::fromLatin1("reporter")));
        _valueReporter.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueReporter.isNil())
        args.append(_valueReporter);
    }
    if (!d_ptr->mSummary_nil) {
        KDSoapValue _valueSummary(QString::fromLatin1("summary"), QVariant::fromValue(d_ptr->mSummary), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueSummary.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSummary.isNil())
        args.append(_valueSummary);
    }
    if (!d_ptr->mVersion_nil) {
        KDSoapValue _valueVersion(QString::fromLatin1("version"), QVariant::fromValue(d_ptr->mVersion), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueVersion.isNil())
        args.append(_valueVersion);
    }
    if (!d_ptr->mBuild_nil) {
        KDSoapValue _valueBuild(QString::fromLatin1("build"), QVariant::fromValue(d_ptr->mBuild), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueBuild.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueBuild.isNil())
        args.append(_valueBuild);
    }
    if (!d_ptr->mPlatform_nil) {
        KDSoapValue _valuePlatform(QString::fromLatin1("platform"), QVariant::fromValue(d_ptr->mPlatform), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valuePlatform.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valuePlatform.isNil())
        args.append(_valuePlatform);
    }
    if (!d_ptr->mOs_nil) {
        KDSoapValue _valueOs(QString::fromLatin1("os"), QVariant::fromValue(d_ptr->mOs), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueOs.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueOs.isNil())
        args.append(_valueOs);
    }
    if (!d_ptr->mOs_build_nil) {
        KDSoapValue _valueOs_build(QString::fromLatin1("os_build"), QVariant::fromValue(d_ptr->mOs_build), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueOs_build.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueOs_build.isNil())
        args.append(_valueOs_build);
    }
    if (!d_ptr->mReproducibility_nil) {
        KDSoapValue _valueReproducibility(d_ptr->mReproducibility.serialize(QString::fromLatin1("reproducibility")));
        _valueReproducibility.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueReproducibility.isNil())
        args.append(_valueReproducibility);
    }
    if (!d_ptr->mDate_submitted_nil) {
        KDSoapValue _valueDate_submitted(QString::fromLatin1("date_submitted"), d_ptr->mDate_submitted.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueDate_submitted.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDate_submitted.isNil())
        args.append(_valueDate_submitted);
    }
    if (!d_ptr->mSponsorship_total_nil) {
        KDSoapValue _valueSponsorship_total(QString::fromLatin1("sponsorship_total"), QVariant::fromValue(d_ptr->mSponsorship_total), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueSponsorship_total.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSponsorship_total.isNil())
        args.append(_valueSponsorship_total);
    }
    if (!d_ptr->mHandler_nil) {
        KDSoapValue _valueHandler(d_ptr->mHandler.serialize(QString::fromLatin1("handler")));
        _valueHandler.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueHandler.isNil())
        args.append(_valueHandler);
    }
    if (!d_ptr->mProjection_nil) {
        KDSoapValue _valueProjection(d_ptr->mProjection.serialize(QString::fromLatin1("projection")));
        _valueProjection.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueProjection.isNil())
        args.append(_valueProjection);
    }
    if (!d_ptr->mEta_nil) {
        KDSoapValue _valueEta(d_ptr->mEta.serialize(QString::fromLatin1("eta")));
        _valueEta.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueEta.isNil())
        args.append(_valueEta);
    }
    if (!d_ptr->mResolution_nil) {
        KDSoapValue _valueResolution(d_ptr->mResolution.serialize(QString::fromLatin1("resolution")));
        _valueResolution.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueResolution.isNil())
        args.append(_valueResolution);
    }
    if (!d_ptr->mFixed_in_version_nil) {
        KDSoapValue _valueFixed_in_version(QString::fromLatin1("fixed_in_version"), QVariant::fromValue(d_ptr->mFixed_in_version), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueFixed_in_version.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueFixed_in_version.isNil())
        args.append(_valueFixed_in_version);
    }
    if (!d_ptr->mTarget_version_nil) {
        KDSoapValue _valueTarget_version(QString::fromLatin1("target_version"), QVariant::fromValue(d_ptr->mTarget_version), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueTarget_version.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueTarget_version.isNil())
        args.append(_valueTarget_version);
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDescription.isNil())
        args.append(_valueDescription);
    }
    if (!d_ptr->mSteps_to_reproduce_nil) {
        KDSoapValue _valueSteps_to_reproduce(QString::fromLatin1("steps_to_reproduce"), QVariant::fromValue(d_ptr->mSteps_to_reproduce), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueSteps_to_reproduce.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSteps_to_reproduce.isNil())
        args.append(_valueSteps_to_reproduce);
    }
    if (!d_ptr->mAdditional_information_nil) {
        KDSoapValue _valueAdditional_information(QString::fromLatin1("additional_information"), QVariant::fromValue(d_ptr->mAdditional_information), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueAdditional_information.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueAdditional_information.isNil())
        args.append(_valueAdditional_information);
    }
    if (!d_ptr->mAttachments_nil) {
        KDSoapValue _valueAttachments(d_ptr->mAttachments.serialize(QString::fromLatin1("attachments")));
        _valueAttachments.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueAttachments.isNil())
        args.append(_valueAttachments);
    }
    if (!d_ptr->mRelationships_nil) {
        KDSoapValue _valueRelationships(d_ptr->mRelationships.serialize(QString::fromLatin1("relationships")));
        _valueRelationships.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueRelationships.isNil())
        args.append(_valueRelationships);
    }
    if (!d_ptr->mNotes_nil) {
        KDSoapValue _valueNotes(d_ptr->mNotes.serialize(QString::fromLatin1("notes")));
        _valueNotes.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueNotes.isNil())
        args.append(_valueNotes);
    }
    if (!d_ptr->mCustom_fields_nil) {
        KDSoapValue _valueCustom_fields(d_ptr->mCustom_fields.serialize(QString::fromLatin1("custom_fields")));
        _valueCustom_fields.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueCustom_fields.isNil())
        args.append(_valueCustom_fields);
    }
    if (!d_ptr->mDue_date_nil) {
        KDSoapValue _valueDue_date(QString::fromLatin1("due_date"), d_ptr->mDue_date.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueDue_date.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDue_date.isNil())
        args.append(_valueDue_date);
    }
    if (!d_ptr->mMonitors_nil) {
        KDSoapValue _valueMonitors(d_ptr->mMonitors.serialize(QString::fromLatin1("monitors")));
        _valueMonitors.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueMonitors.isNil())
        args.append(_valueMonitors);
    }
    return mainValue;
}

void TNS__IssueData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("view_state")) {
            d_ptr->mView_state.deserialize(val);
        }
        else if (_name == QLatin1String("last_updated")) {
            d_ptr->mLast_updated = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mLast_updated_nil = false;
        }
        else if (_name == QLatin1String("project")) {
            d_ptr->mProject.deserialize(val);
        }
        else if (_name == QLatin1String("category")) {
            d_ptr->mCategory = val.value().value<QString>();
            d_ptr->mCategory_nil = false;
        }
        else if (_name == QLatin1String("priority")) {
            d_ptr->mPriority.deserialize(val);
        }
        else if (_name == QLatin1String("severity")) {
            d_ptr->mSeverity.deserialize(val);
        }
        else if (_name == QLatin1String("status")) {
            d_ptr->mStatus.deserialize(val);
        }
        else if (_name == QLatin1String("reporter")) {
            d_ptr->mReporter.deserialize(val);
        }
        else if (_name == QLatin1String("summary")) {
            d_ptr->mSummary = val.value().value<QString>();
            d_ptr->mSummary_nil = false;
        }
        else if (_name == QLatin1String("version")) {
            d_ptr->mVersion = val.value().value<QString>();
            d_ptr->mVersion_nil = false;
        }
        else if (_name == QLatin1String("build")) {
            d_ptr->mBuild = val.value().value<QString>();
            d_ptr->mBuild_nil = false;
        }
        else if (_name == QLatin1String("platform")) {
            d_ptr->mPlatform = val.value().value<QString>();
            d_ptr->mPlatform_nil = false;
        }
        else if (_name == QLatin1String("os")) {
            d_ptr->mOs = val.value().value<QString>();
            d_ptr->mOs_nil = false;
        }
        else if (_name == QLatin1String("os_build")) {
            d_ptr->mOs_build = val.value().value<QString>();
            d_ptr->mOs_build_nil = false;
        }
        else if (_name == QLatin1String("reproducibility")) {
            d_ptr->mReproducibility.deserialize(val);
        }
        else if (_name == QLatin1String("date_submitted")) {
            d_ptr->mDate_submitted = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mDate_submitted_nil = false;
        }
        else if (_name == QLatin1String("sponsorship_total")) {
            d_ptr->mSponsorship_total = val.value().value<qint64>();
            d_ptr->mSponsorship_total_nil = false;
        }
        else if (_name == QLatin1String("handler")) {
            d_ptr->mHandler.deserialize(val);
        }
        else if (_name == QLatin1String("projection")) {
            d_ptr->mProjection.deserialize(val);
        }
        else if (_name == QLatin1String("eta")) {
            d_ptr->mEta.deserialize(val);
        }
        else if (_name == QLatin1String("resolution")) {
            d_ptr->mResolution.deserialize(val);
        }
        else if (_name == QLatin1String("fixed_in_version")) {
            d_ptr->mFixed_in_version = val.value().value<QString>();
            d_ptr->mFixed_in_version_nil = false;
        }
        else if (_name == QLatin1String("target_version")) {
            d_ptr->mTarget_version = val.value().value<QString>();
            d_ptr->mTarget_version_nil = false;
        }
        else if (_name == QLatin1String("description")) {
            d_ptr->mDescription = val.value().value<QString>();
            d_ptr->mDescription_nil = false;
        }
        else if (_name == QLatin1String("steps_to_reproduce")) {
            d_ptr->mSteps_to_reproduce = val.value().value<QString>();
            d_ptr->mSteps_to_reproduce_nil = false;
        }
        else if (_name == QLatin1String("additional_information")) {
            d_ptr->mAdditional_information = val.value().value<QString>();
            d_ptr->mAdditional_information_nil = false;
        }
        else if (_name == QLatin1String("attachments")) {
            d_ptr->mAttachments.deserialize(val);
        }
        else if (_name == QLatin1String("relationships")) {
            d_ptr->mRelationships.deserialize(val);
        }
        else if (_name == QLatin1String("notes")) {
            d_ptr->mNotes.deserialize(val);
        }
        else if (_name == QLatin1String("custom_fields")) {
            d_ptr->mCustom_fields.deserialize(val);
        }
        else if (_name == QLatin1String("due_date")) {
            d_ptr->mDue_date = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mDue_date_nil = false;
        }
        else if (_name == QLatin1String("monitors")) {
            d_ptr->mMonitors.deserialize(val);
        }
    }
}

TNS__IssueData::TNS__IssueData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__IssueData::~TNS__IssueData()
{
}

TNS__IssueData::TNS__IssueData( const TNS__IssueData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__IssueData&  TNS__IssueData::operator=( const TNS__IssueData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ProjectData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    QString mName;
    bool mName_nil;
    TNS__ObjectRef mStatus;
    bool mStatus_nil;
    bool mEnabled;
    bool mEnabled_nil;
    TNS__ObjectRef mView_state;
    bool mView_state_nil;
    TNS__ObjectRef mAccess_min;
    bool mAccess_min_nil;
    QString mFile_path;
    bool mFile_path_nil;
    QString mDescription;
    bool mDescription_nil;
    TNS__ProjectDataArray mSubprojects;
    bool mSubprojects_nil;
    bool mInherit_global;
    bool mInherit_global_nil;
};

TNS__ProjectData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mName_nil(true), mStatus_nil(true), mEnabled(false), mEnabled_nil(true), mView_state_nil(true), mAccess_min_nil(true), mFile_path_nil(true), mDescription_nil(true), mSubprojects_nil(true), mInherit_global(false), mInherit_global_nil(true)
{
}


void TNS__ProjectData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__ProjectData::id() const
{
    return d_ptr->mId;
}

void TNS__ProjectData::setName( const QString& _name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = _name;
}

QString TNS__ProjectData::name() const
{
    return d_ptr->mName;
}

void TNS__ProjectData::setStatus( const TNS__ObjectRef& _status )
{
    d_ptr->mStatus_nil = false;
    d_ptr->mStatus = _status;
}

TNS__ObjectRef TNS__ProjectData::status() const
{
    return d_ptr->mStatus;
}

void TNS__ProjectData::setEnabled( bool _enabled )
{
    d_ptr->mEnabled_nil = false;
    d_ptr->mEnabled = _enabled;
}

bool TNS__ProjectData::enabled() const
{
    return d_ptr->mEnabled;
}

void TNS__ProjectData::setView_state( const TNS__ObjectRef& _view_state )
{
    d_ptr->mView_state_nil = false;
    d_ptr->mView_state = _view_state;
}

TNS__ObjectRef TNS__ProjectData::view_state() const
{
    return d_ptr->mView_state;
}

void TNS__ProjectData::setAccess_min( const TNS__ObjectRef& _access_min )
{
    d_ptr->mAccess_min_nil = false;
    d_ptr->mAccess_min = _access_min;
}

TNS__ObjectRef TNS__ProjectData::access_min() const
{
    return d_ptr->mAccess_min;
}

void TNS__ProjectData::setFile_path( const QString& _file_path )
{
    d_ptr->mFile_path_nil = false;
    d_ptr->mFile_path = _file_path;
}

QString TNS__ProjectData::file_path() const
{
    return d_ptr->mFile_path;
}

void TNS__ProjectData::setDescription( const QString& _description )
{
    d_ptr->mDescription_nil = false;
    d_ptr->mDescription = _description;
}

QString TNS__ProjectData::description() const
{
    return d_ptr->mDescription;
}

void TNS__ProjectData::setSubprojects( const TNS__ProjectDataArray& _subprojects )
{
    d_ptr->mSubprojects_nil = false;
    d_ptr->mSubprojects = _subprojects;
}

TNS__ProjectDataArray TNS__ProjectData::subprojects() const
{
    return d_ptr->mSubprojects;
}

void TNS__ProjectData::setInherit_global( bool _inherit_global )
{
    d_ptr->mInherit_global_nil = false;
    d_ptr->mInherit_global = _inherit_global;
}

bool TNS__ProjectData::inherit_global() const
{
    return d_ptr->mInherit_global;
}

KDSoapValue TNS__ProjectData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueName.isNil())
        args.append(_valueName);
    }
    if (!d_ptr->mStatus_nil) {
        KDSoapValue _valueStatus(d_ptr->mStatus.serialize(QString::fromLatin1("status")));
        _valueStatus.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueStatus.isNil())
        args.append(_valueStatus);
    }
    if (!d_ptr->mEnabled_nil) {
        KDSoapValue _valueEnabled(QString::fromLatin1("enabled"), QVariant::fromValue(d_ptr->mEnabled), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueEnabled.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueEnabled.isNil())
        args.append(_valueEnabled);
    }
    if (!d_ptr->mView_state_nil) {
        KDSoapValue _valueView_state(d_ptr->mView_state.serialize(QString::fromLatin1("view_state")));
        _valueView_state.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueView_state.isNil())
        args.append(_valueView_state);
    }
    if (!d_ptr->mAccess_min_nil) {
        KDSoapValue _valueAccess_min(d_ptr->mAccess_min.serialize(QString::fromLatin1("access_min")));
        _valueAccess_min.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueAccess_min.isNil())
        args.append(_valueAccess_min);
    }
    if (!d_ptr->mFile_path_nil) {
        KDSoapValue _valueFile_path(QString::fromLatin1("file_path"), QVariant::fromValue(d_ptr->mFile_path), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueFile_path.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueFile_path.isNil())
        args.append(_valueFile_path);
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDescription.isNil())
        args.append(_valueDescription);
    }
    if (!d_ptr->mSubprojects_nil) {
        KDSoapValue _valueSubprojects(d_ptr->mSubprojects.serialize(QString::fromLatin1("subprojects")));
        _valueSubprojects.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSubprojects.isNil())
        args.append(_valueSubprojects);
    }
    if (!d_ptr->mInherit_global_nil) {
        KDSoapValue _valueInherit_global(QString::fromLatin1("inherit_global"), QVariant::fromValue(d_ptr->mInherit_global), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
        _valueInherit_global.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueInherit_global.isNil())
        args.append(_valueInherit_global);
    }
    return mainValue;
}

void TNS__ProjectData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("name")) {
            d_ptr->mName = val.value().value<QString>();
            d_ptr->mName_nil = false;
        }
        else if (_name == QLatin1String("status")) {
            d_ptr->mStatus.deserialize(val);
        }
        else if (_name == QLatin1String("enabled")) {
            d_ptr->mEnabled = val.value().value<bool>();
            d_ptr->mEnabled_nil = false;
        }
        else if (_name == QLatin1String("view_state")) {
            d_ptr->mView_state.deserialize(val);
        }
        else if (_name == QLatin1String("access_min")) {
            d_ptr->mAccess_min.deserialize(val);
        }
        else if (_name == QLatin1String("file_path")) {
            d_ptr->mFile_path = val.value().value<QString>();
            d_ptr->mFile_path_nil = false;
        }
        else if (_name == QLatin1String("description")) {
            d_ptr->mDescription = val.value().value<QString>();
            d_ptr->mDescription_nil = false;
        }
        else if (_name == QLatin1String("subprojects")) {
            d_ptr->mSubprojects.deserialize(val);
        }
        else if (_name == QLatin1String("inherit_global")) {
            d_ptr->mInherit_global = val.value().value<bool>();
            d_ptr->mInherit_global_nil = false;
        }
    }
}

TNS__ProjectData::TNS__ProjectData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ProjectData::~TNS__ProjectData()
{
}

TNS__ProjectData::TNS__ProjectData( const TNS__ProjectData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ProjectData&  TNS__ProjectData::operator=( const TNS__ProjectData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__AttachmentData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    QString mFilename;
    bool mFilename_nil;
    qint64 mSize;
    bool mSize_nil;
    QString mContent_type;
    bool mContent_type_nil;
    KDDateTime mDate_submitted;
    bool mDate_submitted_nil;
    QString mDownload_url;
    bool mDownload_url_nil;
};

TNS__AttachmentData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mFilename_nil(true), mSize(0), mSize_nil(true), mContent_type_nil(true), mDate_submitted_nil(true), mDownload_url_nil(true)
{
}


void TNS__AttachmentData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__AttachmentData::id() const
{
    return d_ptr->mId;
}

void TNS__AttachmentData::setFilename( const QString& _filename )
{
    d_ptr->mFilename_nil = false;
    d_ptr->mFilename = _filename;
}

QString TNS__AttachmentData::filename() const
{
    return d_ptr->mFilename;
}

void TNS__AttachmentData::setSize( qint64 _size )
{
    d_ptr->mSize_nil = false;
    d_ptr->mSize = _size;
}

qint64 TNS__AttachmentData::size() const
{
    return d_ptr->mSize;
}

void TNS__AttachmentData::setContent_type( const QString& _content_type )
{
    d_ptr->mContent_type_nil = false;
    d_ptr->mContent_type = _content_type;
}

QString TNS__AttachmentData::content_type() const
{
    return d_ptr->mContent_type;
}

void TNS__AttachmentData::setDate_submitted( const KDDateTime& _date_submitted )
{
    d_ptr->mDate_submitted_nil = false;
    d_ptr->mDate_submitted = _date_submitted;
}

KDDateTime TNS__AttachmentData::date_submitted() const
{
    return d_ptr->mDate_submitted;
}

void TNS__AttachmentData::setDownload_url( const QString& _download_url )
{
    d_ptr->mDownload_url_nil = false;
    d_ptr->mDownload_url = _download_url;
}

QString TNS__AttachmentData::download_url() const
{
    return d_ptr->mDownload_url;
}

KDSoapValue TNS__AttachmentData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("AttachmentData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mFilename_nil) {
        KDSoapValue _valueFilename(QString::fromLatin1("filename"), QVariant::fromValue(d_ptr->mFilename), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueFilename.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueFilename.isNil())
        args.append(_valueFilename);
    }
    if (!d_ptr->mSize_nil) {
        KDSoapValue _valueSize(QString::fromLatin1("size"), QVariant::fromValue(d_ptr->mSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueSize.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueSize.isNil())
        args.append(_valueSize);
    }
    if (!d_ptr->mContent_type_nil) {
        KDSoapValue _valueContent_type(QString::fromLatin1("content_type"), QVariant::fromValue(d_ptr->mContent_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueContent_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueContent_type.isNil())
        args.append(_valueContent_type);
    }
    if (!d_ptr->mDate_submitted_nil) {
        KDSoapValue _valueDate_submitted(QString::fromLatin1("date_submitted"), d_ptr->mDate_submitted.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueDate_submitted.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDate_submitted.isNil())
        args.append(_valueDate_submitted);
    }
    if (!d_ptr->mDownload_url_nil) {
        KDSoapValue _valueDownload_url(QString::fromLatin1("download_url"), QVariant::fromValue(d_ptr->mDownload_url), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("anyURI"));
        _valueDownload_url.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDownload_url.isNil())
        args.append(_valueDownload_url);
    }
    return mainValue;
}

void TNS__AttachmentData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("filename")) {
            d_ptr->mFilename = val.value().value<QString>();
            d_ptr->mFilename_nil = false;
        }
        else if (_name == QLatin1String("size")) {
            d_ptr->mSize = val.value().value<qint64>();
            d_ptr->mSize_nil = false;
        }
        else if (_name == QLatin1String("content_type")) {
            d_ptr->mContent_type = val.value().value<QString>();
            d_ptr->mContent_type_nil = false;
        }
        else if (_name == QLatin1String("date_submitted")) {
            d_ptr->mDate_submitted = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mDate_submitted_nil = false;
        }
        else if (_name == QLatin1String("download_url")) {
            d_ptr->mDownload_url = val.value().value<QString>();
            d_ptr->mDownload_url_nil = false;
        }
    }
}

TNS__AttachmentData::TNS__AttachmentData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__AttachmentData::~TNS__AttachmentData()
{
}

TNS__AttachmentData::TNS__AttachmentData( const TNS__AttachmentData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__AttachmentData&  TNS__AttachmentData::operator=( const TNS__AttachmentData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__IssueNoteData::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    qint64 mId;
    bool mId_nil;
    TNS__AccountData mReporter;
    bool mReporter_nil;
    QString mText;
    bool mText_nil;
    TNS__ObjectRef mView_state;
    bool mView_state_nil;
    KDDateTime mDate_submitted;
    bool mDate_submitted_nil;
    KDDateTime mLast_modified;
    bool mLast_modified_nil;
    qint64 mTime_tracking;
    bool mTime_tracking_nil;
};

TNS__IssueNoteData::PrivateDPtr::PrivateDPtr()
    : mId(0), mId_nil(true), mReporter_nil(true), mText_nil(true), mView_state_nil(true), mDate_submitted_nil(true), mLast_modified_nil(true), mTime_tracking(0), mTime_tracking_nil(true)
{
}


void TNS__IssueNoteData::setId( qint64 _id )
{
    d_ptr->mId_nil = false;
    d_ptr->mId = _id;
}

qint64 TNS__IssueNoteData::id() const
{
    return d_ptr->mId;
}

void TNS__IssueNoteData::setReporter( const TNS__AccountData& _reporter )
{
    d_ptr->mReporter_nil = false;
    d_ptr->mReporter = _reporter;
}

TNS__AccountData TNS__IssueNoteData::reporter() const
{
    return d_ptr->mReporter;
}

void TNS__IssueNoteData::setText( const QString& _text )
{
    d_ptr->mText_nil = false;
    d_ptr->mText = _text;
}

QString TNS__IssueNoteData::text() const
{
    return d_ptr->mText;
}

void TNS__IssueNoteData::setView_state( const TNS__ObjectRef& _view_state )
{
    d_ptr->mView_state_nil = false;
    d_ptr->mView_state = _view_state;
}

TNS__ObjectRef TNS__IssueNoteData::view_state() const
{
    return d_ptr->mView_state;
}

void TNS__IssueNoteData::setDate_submitted( const KDDateTime& _date_submitted )
{
    d_ptr->mDate_submitted_nil = false;
    d_ptr->mDate_submitted = _date_submitted;
}

KDDateTime TNS__IssueNoteData::date_submitted() const
{
    return d_ptr->mDate_submitted;
}

void TNS__IssueNoteData::setLast_modified( const KDDateTime& _last_modified )
{
    d_ptr->mLast_modified_nil = false;
    d_ptr->mLast_modified = _last_modified;
}

KDDateTime TNS__IssueNoteData::last_modified() const
{
    return d_ptr->mLast_modified;
}

void TNS__IssueNoteData::setTime_tracking( qint64 _time_tracking )
{
    d_ptr->mTime_tracking_nil = false;
    d_ptr->mTime_tracking = _time_tracking;
}

qint64 TNS__IssueNoteData::time_tracking() const
{
    return d_ptr->mTime_tracking;
}

KDSoapValue TNS__IssueNoteData::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("IssueNoteData"));
    KDSoapValueList& args = mainValue.childValues();
    if (!d_ptr->mId_nil) {
        KDSoapValue _valueId(QString::fromLatin1("id"), QVariant::fromValue(d_ptr->mId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueId.isNil())
        args.append(_valueId);
    }
    if (!d_ptr->mReporter_nil) {
        KDSoapValue _valueReporter(d_ptr->mReporter.serialize(QString::fromLatin1("reporter")));
        _valueReporter.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueReporter.isNil())
        args.append(_valueReporter);
    }
    if (!d_ptr->mText_nil) {
        KDSoapValue _valueText(QString::fromLatin1("text"), QVariant::fromValue(d_ptr->mText), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
        _valueText.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueText.isNil())
        args.append(_valueText);
    }
    if (!d_ptr->mView_state_nil) {
        KDSoapValue _valueView_state(d_ptr->mView_state.serialize(QString::fromLatin1("view_state")));
        _valueView_state.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueView_state.isNil())
        args.append(_valueView_state);
    }
    if (!d_ptr->mDate_submitted_nil) {
        KDSoapValue _valueDate_submitted(QString::fromLatin1("date_submitted"), d_ptr->mDate_submitted.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueDate_submitted.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueDate_submitted.isNil())
        args.append(_valueDate_submitted);
    }
    if (!d_ptr->mLast_modified_nil) {
        KDSoapValue _valueLast_modified(QString::fromLatin1("last_modified"), d_ptr->mLast_modified.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));
        _valueLast_modified.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueLast_modified.isNil())
        args.append(_valueLast_modified);
    }
    if (!d_ptr->mTime_tracking_nil) {
        KDSoapValue _valueTime_tracking(QString::fromLatin1("time_tracking"), QVariant::fromValue(d_ptr->mTime_tracking), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
        _valueTime_tracking.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        if (!_valueTime_tracking.isNil())
        args.append(_valueTime_tracking);
    }
    return mainValue;
}

void TNS__IssueNoteData::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("id")) {
            d_ptr->mId = val.value().value<qint64>();
            d_ptr->mId_nil = false;
        }
        else if (_name == QLatin1String("reporter")) {
            d_ptr->mReporter.deserialize(val);
        }
        else if (_name == QLatin1String("text")) {
            d_ptr->mText = val.value().value<QString>();
            d_ptr->mText_nil = false;
        }
        else if (_name == QLatin1String("view_state")) {
            d_ptr->mView_state.deserialize(val);
        }
        else if (_name == QLatin1String("date_submitted")) {
            d_ptr->mDate_submitted = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mDate_submitted_nil = false;
        }
        else if (_name == QLatin1String("last_modified")) {
            d_ptr->mLast_modified = KDDateTime::fromDateString(val.value().toString());
            d_ptr->mLast_modified_nil = false;
        }
        else if (_name == QLatin1String("time_tracking")) {
            d_ptr->mTime_tracking = val.value().value<qint64>();
            d_ptr->mTime_tracking_nil = false;
        }
    }
}

TNS__IssueNoteData::TNS__IssueNoteData()
    : d_ptr(new PrivateDPtr)
{
}

TNS__IssueNoteData::~TNS__IssueNoteData()
{
}

TNS__IssueNoteData::TNS__IssueNoteData( const TNS__IssueNoteData& other )
    : d_ptr( other.d_ptr )
{
}

TNS__IssueNoteData&  TNS__IssueNoteData::operator=( const TNS__IssueNoteData& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class TNS__ProjectAttachmentDataArray::PrivateDPtr : public QSharedData
{
public:
    QList< TNS__ProjectAttachmentData > mItems;
};

void TNS__ProjectAttachmentDataArray::setItems( const QList< TNS__ProjectAttachmentData >& _items )
{
    d_ptr->mItems = _items;
}

QList< TNS__ProjectAttachmentData > TNS__ProjectAttachmentDataArray::items() const
{
    return d_ptr->mItems;
}

KDSoapValue TNS__ProjectAttachmentDataArray::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectAttachmentDataArray"));
    KDSoapValueList& args = mainValue.childValues();
    args.setArrayType(QString::fromLatin1("http://futureware.biz/mantisconnect"), QString::fromLatin1("ProjectAttachmentData"));
    for (int i = 0; i < d_ptr->mItems.count(); ++i) {
        KDSoapValue _valueItem(d_ptr->mItems.at(i).serialize(QString::fromLatin1("item")));
        _valueItem.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
        args.append(_valueItem);
    }
    return mainValue;
}

void TNS__ProjectAttachmentDataArray::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        TNS__ProjectAttachmentData mItemsTemp;
        mItemsTemp.deserialize(val);
        d_ptr->mItems.append(mItemsTemp);
    }
}

TNS__ProjectAttachmentDataArray::TNS__ProjectAttachmentDataArray()
    : d_ptr(new PrivateDPtr)
{
}

TNS__ProjectAttachmentDataArray::~TNS__ProjectAttachmentDataArray()
{
}

TNS__ProjectAttachmentDataArray::TNS__ProjectAttachmentDataArray( const TNS__ProjectAttachmentDataArray& other )
    : d_ptr( other.d_ptr )
{
}

TNS__ProjectAttachmentDataArray&  TNS__ProjectAttachmentDataArray::operator=( const TNS__ProjectAttachmentDataArray& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


Mc_versionJob::Mc_versionJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mResultReturn()
{
}

void Mc_versionJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_version");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_version"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

QString Mc_versionJob::return_() const
{
    return mResultReturn;
}

void Mc_versionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<QString>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_getJob::Mc_enum_getJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mEnumeration(), mResultReturn()
{
}

void Mc_enum_getJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_getJob::username() const
{
    return mUsername;
}

void Mc_enum_getJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_getJob::password() const
{
    return mPassword;
}

void Mc_enum_getJob::setEnumeration( const QString& arg0 )
{
    mEnumeration = arg0;
}

QString Mc_enum_getJob::enumeration() const
{
    return mEnumeration;
}

void Mc_enum_getJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueEnumeration(QString::fromLatin1("enumeration"), QVariant::fromValue(mEnumeration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueEnumeration.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueEnumeration);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

QString Mc_enum_getJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_getJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<QString>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_existsJob::Mc_issue_existsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mResultReturn()
{
}

void Mc_issue_existsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_existsJob::username() const
{
    return mUsername;
}

void Mc_issue_existsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_existsJob::password() const
{
    return mPassword;
}

void Mc_issue_existsJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_existsJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_existsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_exists");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_exists"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_existsJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_existsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_get_biggest_idJob::Mc_issue_get_biggest_idJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_issue_get_biggest_idJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_get_biggest_idJob::username() const
{
    return mUsername;
}

void Mc_issue_get_biggest_idJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_get_biggest_idJob::password() const
{
    return mPassword;
}

void Mc_issue_get_biggest_idJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_issue_get_biggest_idJob::project_id() const
{
    return mProject_id;
}

void Mc_issue_get_biggest_idJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get_biggest_id");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_get_biggest_id"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_issue_get_biggest_idJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_get_biggest_idJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_get_id_from_summaryJob::Mc_issue_get_id_from_summaryJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mSummary(), mResultReturn()
{
}

void Mc_issue_get_id_from_summaryJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_get_id_from_summaryJob::username() const
{
    return mUsername;
}

void Mc_issue_get_id_from_summaryJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_get_id_from_summaryJob::password() const
{
    return mPassword;
}

void Mc_issue_get_id_from_summaryJob::setSummary( const QString& arg0 )
{
    mSummary = arg0;
}

QString Mc_issue_get_id_from_summaryJob::summary() const
{
    return mSummary;
}

void Mc_issue_get_id_from_summaryJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get_id_from_summary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueSummary(QString::fromLatin1("summary"), QVariant::fromValue(mSummary), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueSummary.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueSummary);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_get_id_from_summary"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_issue_get_id_from_summaryJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_get_id_from_summaryJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_deleteJob::Mc_issue_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mResultReturn()
{
}

void Mc_issue_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_deleteJob::username() const
{
    return mUsername;
}

void Mc_issue_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_deleteJob::password() const
{
    return mPassword;
}

void Mc_issue_deleteJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_deleteJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_note_deleteJob::Mc_issue_note_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_note_id(), mResultReturn()
{
}

void Mc_issue_note_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_note_deleteJob::username() const
{
    return mUsername;
}

void Mc_issue_note_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_note_deleteJob::password() const
{
    return mPassword;
}

void Mc_issue_note_deleteJob::setIssue_note_id( qint64 arg0 )
{
    mIssue_note_id = arg0;
}

qint64 Mc_issue_note_deleteJob::issue_note_id() const
{
    return mIssue_note_id;
}

void Mc_issue_note_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_note_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_note_id(QString::fromLatin1("issue_note_id"), QVariant::fromValue(mIssue_note_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_note_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_note_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_note_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_note_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_note_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_relationship_deleteJob::Mc_issue_relationship_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mRelationship_id(), mResultReturn()
{
}

void Mc_issue_relationship_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_relationship_deleteJob::username() const
{
    return mUsername;
}

void Mc_issue_relationship_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_relationship_deleteJob::password() const
{
    return mPassword;
}

void Mc_issue_relationship_deleteJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_relationship_deleteJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_relationship_deleteJob::setRelationship_id( qint64 arg0 )
{
    mRelationship_id = arg0;
}

qint64 Mc_issue_relationship_deleteJob::relationship_id() const
{
    return mRelationship_id;
}

void Mc_issue_relationship_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_relationship_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueRelationship_id(QString::fromLatin1("relationship_id"), QVariant::fromValue(mRelationship_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueRelationship_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueRelationship_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_relationship_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_relationship_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_relationship_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_attachment_addJob::Mc_issue_attachment_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mName(), mFile_type(), mContent(), mResultReturn()
{
}

void Mc_issue_attachment_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_attachment_addJob::username() const
{
    return mUsername;
}

void Mc_issue_attachment_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_attachment_addJob::password() const
{
    return mPassword;
}

void Mc_issue_attachment_addJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_attachment_addJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_attachment_addJob::setName( const QString& arg0 )
{
    mName = arg0;
}

QString Mc_issue_attachment_addJob::name() const
{
    return mName;
}

void Mc_issue_attachment_addJob::setFile_type( const QString& arg0 )
{
    mFile_type = arg0;
}

QString Mc_issue_attachment_addJob::file_type() const
{
    return mFile_type;
}

void Mc_issue_attachment_addJob::setContent( const QByteArray& arg0 )
{
    mContent = arg0;
}

QByteArray Mc_issue_attachment_addJob::content() const
{
    return mContent;
}

void Mc_issue_attachment_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueName);
    KDSoapValue _valueFile_type(QString::fromLatin1("file_type"), QVariant::fromValue(mFile_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueFile_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFile_type);
    KDSoapValue _valueContent(QString::fromLatin1("content"), QString::fromLatin1(mContent.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));
    _valueContent.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueContent);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_attachment_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_issue_attachment_addJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_attachment_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_attachment_deleteJob::Mc_issue_attachment_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_attachment_id(), mResultReturn()
{
}

void Mc_issue_attachment_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_attachment_deleteJob::username() const
{
    return mUsername;
}

void Mc_issue_attachment_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_attachment_deleteJob::password() const
{
    return mPassword;
}

void Mc_issue_attachment_deleteJob::setIssue_attachment_id( qint64 arg0 )
{
    mIssue_attachment_id = arg0;
}

qint64 Mc_issue_attachment_deleteJob::issue_attachment_id() const
{
    return mIssue_attachment_id;
}

void Mc_issue_attachment_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_attachment_id(QString::fromLatin1("issue_attachment_id"), QVariant::fromValue(mIssue_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_attachment_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_attachment_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_attachment_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_attachment_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_attachment_getJob::Mc_issue_attachment_getJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_attachment_id(), mResultReturn()
{
}

void Mc_issue_attachment_getJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_attachment_getJob::username() const
{
    return mUsername;
}

void Mc_issue_attachment_getJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_attachment_getJob::password() const
{
    return mPassword;
}

void Mc_issue_attachment_getJob::setIssue_attachment_id( qint64 arg0 )
{
    mIssue_attachment_id = arg0;
}

qint64 Mc_issue_attachment_getJob::issue_attachment_id() const
{
    return mIssue_attachment_id;
}

void Mc_issue_attachment_getJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_attachment_id(QString::fromLatin1("issue_attachment_id"), QVariant::fromValue(mIssue_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_attachment_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_attachment_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

QByteArray Mc_issue_attachment_getJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_attachment_getJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = QByteArray::fromBase64(_reply.value().toString().toLatin1());
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_deleteJob::Mc_project_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_deleteJob::username() const
{
    return mUsername;
}

void Mc_project_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_deleteJob::password() const
{
    return mPassword;
}

void Mc_project_deleteJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_deleteJob::project_id() const
{
    return mProject_id;
}

void Mc_project_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_project_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_project_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_id_from_nameJob::Mc_project_get_id_from_nameJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_name(), mResultReturn()
{
}

void Mc_project_get_id_from_nameJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_id_from_nameJob::username() const
{
    return mUsername;
}

void Mc_project_get_id_from_nameJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_id_from_nameJob::password() const
{
    return mPassword;
}

void Mc_project_get_id_from_nameJob::setProject_name( const QString& arg0 )
{
    mProject_name = arg0;
}

QString Mc_project_get_id_from_nameJob::project_name() const
{
    return mProject_name;
}

void Mc_project_get_id_from_nameJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_id_from_name");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_name(QString::fromLatin1("project_name"), QVariant::fromValue(mProject_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueProject_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_name);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_id_from_name"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_get_id_from_nameJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_id_from_nameJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_add_categoryJob::Mc_project_add_categoryJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mP_category_name(), mResultReturn()
{
}

void Mc_project_add_categoryJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_add_categoryJob::username() const
{
    return mUsername;
}

void Mc_project_add_categoryJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_add_categoryJob::password() const
{
    return mPassword;
}

void Mc_project_add_categoryJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_add_categoryJob::project_id() const
{
    return mProject_id;
}

void Mc_project_add_categoryJob::setP_category_name( const QString& arg0 )
{
    mP_category_name = arg0;
}

QString Mc_project_add_categoryJob::p_category_name() const
{
    return mP_category_name;
}

void Mc_project_add_categoryJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_add_category");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(mP_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_add_category"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_add_categoryJob::return_() const
{
    return mResultReturn;
}

void Mc_project_add_categoryJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_delete_categoryJob::Mc_project_delete_categoryJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mP_category_name(), mResultReturn()
{
}

void Mc_project_delete_categoryJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_delete_categoryJob::username() const
{
    return mUsername;
}

void Mc_project_delete_categoryJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_delete_categoryJob::password() const
{
    return mPassword;
}

void Mc_project_delete_categoryJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_delete_categoryJob::project_id() const
{
    return mProject_id;
}

void Mc_project_delete_categoryJob::setP_category_name( const QString& arg0 )
{
    mP_category_name = arg0;
}

QString Mc_project_delete_categoryJob::p_category_name() const
{
    return mP_category_name;
}

void Mc_project_delete_categoryJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_delete_category");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(mP_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_delete_category"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_delete_categoryJob::return_() const
{
    return mResultReturn;
}

void Mc_project_delete_categoryJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_rename_category_by_nameJob::Mc_project_rename_category_by_nameJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mP_category_name(), mP_category_name_new(), mP_assigned_to(), mResultReturn()
{
}

void Mc_project_rename_category_by_nameJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_rename_category_by_nameJob::username() const
{
    return mUsername;
}

void Mc_project_rename_category_by_nameJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_rename_category_by_nameJob::password() const
{
    return mPassword;
}

void Mc_project_rename_category_by_nameJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_rename_category_by_nameJob::project_id() const
{
    return mProject_id;
}

void Mc_project_rename_category_by_nameJob::setP_category_name( const QString& arg0 )
{
    mP_category_name = arg0;
}

QString Mc_project_rename_category_by_nameJob::p_category_name() const
{
    return mP_category_name;
}

void Mc_project_rename_category_by_nameJob::setP_category_name_new( const QString& arg0 )
{
    mP_category_name_new = arg0;
}

QString Mc_project_rename_category_by_nameJob::p_category_name_new() const
{
    return mP_category_name_new;
}

void Mc_project_rename_category_by_nameJob::setP_assigned_to( qint64 arg0 )
{
    mP_assigned_to = arg0;
}

qint64 Mc_project_rename_category_by_nameJob::p_assigned_to() const
{
    return mP_assigned_to;
}

void Mc_project_rename_category_by_nameJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_rename_category_by_name");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(mP_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapValue _valueP_category_name_new(QString::fromLatin1("p_category_name_new"), QVariant::fromValue(mP_category_name_new), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name_new.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name_new);
    KDSoapValue _valueP_assigned_to(QString::fromLatin1("p_assigned_to"), QVariant::fromValue(mP_assigned_to), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueP_assigned_to.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_assigned_to);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_rename_category_by_name"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_rename_category_by_nameJob::return_() const
{
    return mResultReturn;
}

void Mc_project_rename_category_by_nameJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_version_deleteJob::Mc_project_version_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mVersion_id(), mResultReturn()
{
}

void Mc_project_version_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_version_deleteJob::username() const
{
    return mUsername;
}

void Mc_project_version_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_version_deleteJob::password() const
{
    return mPassword;
}

void Mc_project_version_deleteJob::setVersion_id( qint64 arg0 )
{
    mVersion_id = arg0;
}

qint64 Mc_project_version_deleteJob::version_id() const
{
    return mVersion_id;
}

void Mc_project_version_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion_id(QString::fromLatin1("version_id"), QVariant::fromValue(mVersion_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueVersion_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_version_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_project_version_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_project_version_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_attachment_getJob::Mc_project_attachment_getJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_attachment_id(), mResultReturn()
{
}

void Mc_project_attachment_getJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_attachment_getJob::username() const
{
    return mUsername;
}

void Mc_project_attachment_getJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_attachment_getJob::password() const
{
    return mPassword;
}

void Mc_project_attachment_getJob::setProject_attachment_id( qint64 arg0 )
{
    mProject_attachment_id = arg0;
}

qint64 Mc_project_attachment_getJob::project_attachment_id() const
{
    return mProject_attachment_id;
}

void Mc_project_attachment_getJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_attachment_id(QString::fromLatin1("project_attachment_id"), QVariant::fromValue(mProject_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_attachment_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_attachment_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

QByteArray Mc_project_attachment_getJob::return_() const
{
    return mResultReturn;
}

void Mc_project_attachment_getJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = QByteArray::fromBase64(_reply.value().toString().toLatin1());
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_attachment_addJob::Mc_project_attachment_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mName(), mTitle(), mDescription(), mFile_type(), mContent(), mResultReturn()
{
}

void Mc_project_attachment_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_attachment_addJob::username() const
{
    return mUsername;
}

void Mc_project_attachment_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_attachment_addJob::password() const
{
    return mPassword;
}

void Mc_project_attachment_addJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_attachment_addJob::project_id() const
{
    return mProject_id;
}

void Mc_project_attachment_addJob::setName( const QString& arg0 )
{
    mName = arg0;
}

QString Mc_project_attachment_addJob::name() const
{
    return mName;
}

void Mc_project_attachment_addJob::setTitle( const QString& arg0 )
{
    mTitle = arg0;
}

QString Mc_project_attachment_addJob::title() const
{
    return mTitle;
}

void Mc_project_attachment_addJob::setDescription( const QString& arg0 )
{
    mDescription = arg0;
}

QString Mc_project_attachment_addJob::description() const
{
    return mDescription;
}

void Mc_project_attachment_addJob::setFile_type( const QString& arg0 )
{
    mFile_type = arg0;
}

QString Mc_project_attachment_addJob::file_type() const
{
    return mFile_type;
}

void Mc_project_attachment_addJob::setContent( const QByteArray& arg0 )
{
    mContent = arg0;
}

QByteArray Mc_project_attachment_addJob::content() const
{
    return mContent;
}

void Mc_project_attachment_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueName);
    KDSoapValue _valueTitle(QString::fromLatin1("title"), QVariant::fromValue(mTitle), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueTitle.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueTitle);
    KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueDescription);
    KDSoapValue _valueFile_type(QString::fromLatin1("file_type"), QVariant::fromValue(mFile_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueFile_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFile_type);
    KDSoapValue _valueContent(QString::fromLatin1("content"), QString::fromLatin1(mContent.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));
    _valueContent.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueContent);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_attachment_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_attachment_addJob::return_() const
{
    return mResultReturn;
}

void Mc_project_attachment_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_attachment_deleteJob::Mc_project_attachment_deleteJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_attachment_id(), mResultReturn()
{
}

void Mc_project_attachment_deleteJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_attachment_deleteJob::username() const
{
    return mUsername;
}

void Mc_project_attachment_deleteJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_attachment_deleteJob::password() const
{
    return mPassword;
}

void Mc_project_attachment_deleteJob::setProject_attachment_id( qint64 arg0 )
{
    mProject_attachment_id = arg0;
}

qint64 Mc_project_attachment_deleteJob::project_attachment_id() const
{
    return mProject_attachment_id;
}

void Mc_project_attachment_deleteJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_attachment_id(QString::fromLatin1("project_attachment_id"), QVariant::fromValue(mProject_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_attachment_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_attachment_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_project_attachment_deleteJob::return_() const
{
    return mResultReturn;
}

void Mc_project_attachment_deleteJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_config_get_stringJob::Mc_config_get_stringJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mConfig_var(), mResultReturn()
{
}

void Mc_config_get_stringJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_config_get_stringJob::username() const
{
    return mUsername;
}

void Mc_config_get_stringJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_config_get_stringJob::password() const
{
    return mPassword;
}

void Mc_config_get_stringJob::setConfig_var( const QString& arg0 )
{
    mConfig_var = arg0;
}

QString Mc_config_get_stringJob::config_var() const
{
    return mConfig_var;
}

void Mc_config_get_stringJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_config_get_string");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueConfig_var(QString::fromLatin1("config_var"), QVariant::fromValue(mConfig_var), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueConfig_var.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueConfig_var);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_config_get_string"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

QString Mc_config_get_stringJob::return_() const
{
    return mResultReturn;
}

void Mc_config_get_stringJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<QString>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_checkinJob::Mc_issue_checkinJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mComment(), mFixed(), mResultReturn()
{
}

void Mc_issue_checkinJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_checkinJob::username() const
{
    return mUsername;
}

void Mc_issue_checkinJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_checkinJob::password() const
{
    return mPassword;
}

void Mc_issue_checkinJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_checkinJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_checkinJob::setComment( const QString& arg0 )
{
    mComment = arg0;
}

QString Mc_issue_checkinJob::comment() const
{
    return mComment;
}

void Mc_issue_checkinJob::setFixed( bool arg0 )
{
    mFixed = arg0;
}

bool Mc_issue_checkinJob::fixed() const
{
    return mFixed;
}

void Mc_issue_checkinJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_checkin");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueComment(QString::fromLatin1("comment"), QVariant::fromValue(mComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueComment.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueComment);
    KDSoapValue _valueFixed(QString::fromLatin1("fixed"), QVariant::fromValue(mFixed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
    _valueFixed.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFixed);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_checkin"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_checkinJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_checkinJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_statusJob::Mc_enum_statusJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_statusJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_statusJob::username() const
{
    return mUsername;
}

void Mc_enum_statusJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_statusJob::password() const
{
    return mPassword;
}

void Mc_enum_statusJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_status"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_statusJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_statusJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_prioritiesJob::Mc_enum_prioritiesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_prioritiesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_prioritiesJob::username() const
{
    return mUsername;
}

void Mc_enum_prioritiesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_prioritiesJob::password() const
{
    return mPassword;
}

void Mc_enum_prioritiesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_priorities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_priorities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_prioritiesJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_prioritiesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_severitiesJob::Mc_enum_severitiesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_severitiesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_severitiesJob::username() const
{
    return mUsername;
}

void Mc_enum_severitiesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_severitiesJob::password() const
{
    return mPassword;
}

void Mc_enum_severitiesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_severities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_severities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_severitiesJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_severitiesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_reproducibilitiesJob::Mc_enum_reproducibilitiesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_reproducibilitiesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_reproducibilitiesJob::username() const
{
    return mUsername;
}

void Mc_enum_reproducibilitiesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_reproducibilitiesJob::password() const
{
    return mPassword;
}

void Mc_enum_reproducibilitiesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_reproducibilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_reproducibilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_reproducibilitiesJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_reproducibilitiesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_projectionsJob::Mc_enum_projectionsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_projectionsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_projectionsJob::username() const
{
    return mUsername;
}

void Mc_enum_projectionsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_projectionsJob::password() const
{
    return mPassword;
}

void Mc_enum_projectionsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_projections");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_projections"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_projectionsJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_projectionsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_etasJob::Mc_enum_etasJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_etasJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_etasJob::username() const
{
    return mUsername;
}

void Mc_enum_etasJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_etasJob::password() const
{
    return mPassword;
}

void Mc_enum_etasJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_etas");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_etas"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_etasJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_etasJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_resolutionsJob::Mc_enum_resolutionsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_resolutionsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_resolutionsJob::username() const
{
    return mUsername;
}

void Mc_enum_resolutionsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_resolutionsJob::password() const
{
    return mPassword;
}

void Mc_enum_resolutionsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_resolutions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_resolutions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_resolutionsJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_resolutionsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_access_levelsJob::Mc_enum_access_levelsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_access_levelsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_access_levelsJob::username() const
{
    return mUsername;
}

void Mc_enum_access_levelsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_access_levelsJob::password() const
{
    return mPassword;
}

void Mc_enum_access_levelsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_access_levels");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_access_levels"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_access_levelsJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_access_levelsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_project_statusJob::Mc_enum_project_statusJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_project_statusJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_project_statusJob::username() const
{
    return mUsername;
}

void Mc_enum_project_statusJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_project_statusJob::password() const
{
    return mPassword;
}

void Mc_enum_project_statusJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_project_status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_project_status"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_project_statusJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_project_statusJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_project_view_statesJob::Mc_enum_project_view_statesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_project_view_statesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_project_view_statesJob::username() const
{
    return mUsername;
}

void Mc_enum_project_view_statesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_project_view_statesJob::password() const
{
    return mPassword;
}

void Mc_enum_project_view_statesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_project_view_states");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_project_view_states"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_project_view_statesJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_project_view_statesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_view_statesJob::Mc_enum_view_statesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_view_statesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_view_statesJob::username() const
{
    return mUsername;
}

void Mc_enum_view_statesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_view_statesJob::password() const
{
    return mPassword;
}

void Mc_enum_view_statesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_view_states");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_view_states"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_view_statesJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_view_statesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_enum_custom_field_typesJob::Mc_enum_custom_field_typesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_enum_custom_field_typesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_enum_custom_field_typesJob::username() const
{
    return mUsername;
}

void Mc_enum_custom_field_typesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_enum_custom_field_typesJob::password() const
{
    return mPassword;
}

void Mc_enum_custom_field_typesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_custom_field_types");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_enum_custom_field_types"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ObjectRefArray Mc_enum_custom_field_typesJob::return_() const
{
    return mResultReturn;
}

void Mc_enum_custom_field_typesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_getJob::Mc_issue_getJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mResultReturn()
{
}

void Mc_issue_getJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_getJob::username() const
{
    return mUsername;
}

void Mc_issue_getJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_getJob::password() const
{
    return mPassword;
}

void Mc_issue_getJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_getJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_getJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__IssueData Mc_issue_getJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_getJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_addJob::Mc_issue_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue(), mResultReturn()
{
}

void Mc_issue_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_addJob::username() const
{
    return mUsername;
}

void Mc_issue_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_addJob::password() const
{
    return mPassword;
}

void Mc_issue_addJob::setIssue( const TNS__IssueData& arg0 )
{
    mIssue = arg0;
}

TNS__IssueData Mc_issue_addJob::issue() const
{
    return mIssue;
}

void Mc_issue_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue(mIssue.serialize(QString::fromLatin1("issue")));
    _valueIssue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_issue_addJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_updateJob::Mc_issue_updateJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssueId(), mIssue(), mResultReturn()
{
}

void Mc_issue_updateJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_updateJob::username() const
{
    return mUsername;
}

void Mc_issue_updateJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_updateJob::password() const
{
    return mPassword;
}

void Mc_issue_updateJob::setIssueId( qint64 arg0 )
{
    mIssueId = arg0;
}

qint64 Mc_issue_updateJob::issueId() const
{
    return mIssueId;
}

void Mc_issue_updateJob::setIssue( const TNS__IssueData& arg0 )
{
    mIssue = arg0;
}

TNS__IssueData Mc_issue_updateJob::issue() const
{
    return mIssue;
}

void Mc_issue_updateJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssueId(QString::fromLatin1("issueId"), QVariant::fromValue(mIssueId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssueId);
    KDSoapValue _valueIssue(mIssue.serialize(QString::fromLatin1("issue")));
    _valueIssue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_update"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_issue_updateJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_updateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_note_addJob::Mc_issue_note_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mNote(), mResultReturn()
{
}

void Mc_issue_note_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_note_addJob::username() const
{
    return mUsername;
}

void Mc_issue_note_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_note_addJob::password() const
{
    return mPassword;
}

void Mc_issue_note_addJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_note_addJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_note_addJob::setNote( const TNS__IssueNoteData& arg0 )
{
    mNote = arg0;
}

TNS__IssueNoteData Mc_issue_note_addJob::note() const
{
    return mNote;
}

void Mc_issue_note_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_note_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueNote(mNote.serialize(QString::fromLatin1("note")));
    _valueNote.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueNote);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_note_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_issue_note_addJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_note_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_issue_relationship_addJob::Mc_issue_relationship_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mIssue_id(), mRelationship(), mResultReturn()
{
}

void Mc_issue_relationship_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_issue_relationship_addJob::username() const
{
    return mUsername;
}

void Mc_issue_relationship_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_issue_relationship_addJob::password() const
{
    return mPassword;
}

void Mc_issue_relationship_addJob::setIssue_id( qint64 arg0 )
{
    mIssue_id = arg0;
}

qint64 Mc_issue_relationship_addJob::issue_id() const
{
    return mIssue_id;
}

void Mc_issue_relationship_addJob::setRelationship( const TNS__RelationshipData& arg0 )
{
    mRelationship = arg0;
}

TNS__RelationshipData Mc_issue_relationship_addJob::relationship() const
{
    return mRelationship;
}

void Mc_issue_relationship_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_relationship_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(mIssue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueRelationship(mRelationship.serialize(QString::fromLatin1("relationship")));
    _valueRelationship.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueRelationship);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_issue_relationship_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_issue_relationship_addJob::return_() const
{
    return mResultReturn;
}

void Mc_issue_relationship_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_addJob::Mc_project_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject(), mResultReturn()
{
}

void Mc_project_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_addJob::username() const
{
    return mUsername;
}

void Mc_project_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_addJob::password() const
{
    return mPassword;
}

void Mc_project_addJob::setProject( const TNS__ProjectData& arg0 )
{
    mProject = arg0;
}

TNS__ProjectData Mc_project_addJob::project() const
{
    return mProject;
}

void Mc_project_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject(mProject.serialize(QString::fromLatin1("project")));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_addJob::return_() const
{
    return mResultReturn;
}

void Mc_project_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_updateJob::Mc_project_updateJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mProject(), mResultReturn()
{
}

void Mc_project_updateJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_updateJob::username() const
{
    return mUsername;
}

void Mc_project_updateJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_updateJob::password() const
{
    return mPassword;
}

void Mc_project_updateJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_updateJob::project_id() const
{
    return mProject_id;
}

void Mc_project_updateJob::setProject( const TNS__ProjectData& arg0 )
{
    mProject = arg0;
}

TNS__ProjectData Mc_project_updateJob::project() const
{
    return mProject;
}

void Mc_project_updateJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueProject(mProject.serialize(QString::fromLatin1("project")));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_update"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_project_updateJob::return_() const
{
    return mResultReturn;
}

void Mc_project_updateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_issuesJob::Mc_project_get_issuesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mPage_number(), mPer_page(), mResultReturn()
{
}

void Mc_project_get_issuesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_issuesJob::username() const
{
    return mUsername;
}

void Mc_project_get_issuesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_issuesJob::password() const
{
    return mPassword;
}

void Mc_project_get_issuesJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_issuesJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_issuesJob::setPage_number( qint64 arg0 )
{
    mPage_number = arg0;
}

qint64 Mc_project_get_issuesJob::page_number() const
{
    return mPage_number;
}

void Mc_project_get_issuesJob::setPer_page( qint64 arg0 )
{
    mPer_page = arg0;
}

qint64 Mc_project_get_issuesJob::per_page() const
{
    return mPer_page;
}

void Mc_project_get_issuesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_issues");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(mPage_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(mPer_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_issues"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__IssueDataArray Mc_project_get_issuesJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_issuesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_issue_headersJob::Mc_project_get_issue_headersJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mPage_number(), mPer_page(), mResultReturn()
{
}

void Mc_project_get_issue_headersJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_issue_headersJob::username() const
{
    return mUsername;
}

void Mc_project_get_issue_headersJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_issue_headersJob::password() const
{
    return mPassword;
}

void Mc_project_get_issue_headersJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_issue_headersJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_issue_headersJob::setPage_number( qint64 arg0 )
{
    mPage_number = arg0;
}

qint64 Mc_project_get_issue_headersJob::page_number() const
{
    return mPage_number;
}

void Mc_project_get_issue_headersJob::setPer_page( qint64 arg0 )
{
    mPer_page = arg0;
}

qint64 Mc_project_get_issue_headersJob::per_page() const
{
    return mPer_page;
}

void Mc_project_get_issue_headersJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_issue_headers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(mPage_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(mPer_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_issue_headers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__IssueHeaderDataArray Mc_project_get_issue_headersJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_issue_headersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_usersJob::Mc_project_get_usersJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mAccess(), mResultReturn()
{
}

void Mc_project_get_usersJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_usersJob::username() const
{
    return mUsername;
}

void Mc_project_get_usersJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_usersJob::password() const
{
    return mPassword;
}

void Mc_project_get_usersJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_usersJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_usersJob::setAccess( qint64 arg0 )
{
    mAccess = arg0;
}

qint64 Mc_project_get_usersJob::access() const
{
    return mAccess;
}

void Mc_project_get_usersJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_users");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueAccess(QString::fromLatin1("access"), QVariant::fromValue(mAccess), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueAccess.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueAccess);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_users"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__AccountDataArray Mc_project_get_usersJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_usersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_projects_get_user_accessibleJob::Mc_projects_get_user_accessibleJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mResultReturn()
{
}

void Mc_projects_get_user_accessibleJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_projects_get_user_accessibleJob::username() const
{
    return mUsername;
}

void Mc_projects_get_user_accessibleJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_projects_get_user_accessibleJob::password() const
{
    return mPassword;
}

void Mc_projects_get_user_accessibleJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_projects_get_user_accessible");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_projects_get_user_accessible"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ProjectDataArray Mc_projects_get_user_accessibleJob::return_() const
{
    return mResultReturn;
}

void Mc_projects_get_user_accessibleJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_categoriesJob::Mc_project_get_categoriesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_categoriesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_categoriesJob::username() const
{
    return mUsername;
}

void Mc_project_get_categoriesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_categoriesJob::password() const
{
    return mPassword;
}

void Mc_project_get_categoriesJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_categoriesJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_categoriesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_categories");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_categories"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__StringArray Mc_project_get_categoriesJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_categoriesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_versionsJob::Mc_project_get_versionsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_versionsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_versionsJob::username() const
{
    return mUsername;
}

void Mc_project_get_versionsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_versionsJob::password() const
{
    return mPassword;
}

void Mc_project_get_versionsJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_versionsJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_versionsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_versions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ProjectVersionDataArray Mc_project_get_versionsJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_versionsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_version_addJob::Mc_project_version_addJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mVersion(), mResultReturn()
{
}

void Mc_project_version_addJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_version_addJob::username() const
{
    return mUsername;
}

void Mc_project_version_addJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_version_addJob::password() const
{
    return mPassword;
}

void Mc_project_version_addJob::setVersion( const TNS__ProjectVersionData& arg0 )
{
    mVersion = arg0;
}

TNS__ProjectVersionData Mc_project_version_addJob::version() const
{
    return mVersion;
}

void Mc_project_version_addJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion(mVersion.serialize(QString::fromLatin1("version")));
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_version_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

qint64 Mc_project_version_addJob::return_() const
{
    return mResultReturn;
}

void Mc_project_version_addJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<qint64>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_version_updateJob::Mc_project_version_updateJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mVersion_id(), mVersion(), mResultReturn()
{
}

void Mc_project_version_updateJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_version_updateJob::username() const
{
    return mUsername;
}

void Mc_project_version_updateJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_version_updateJob::password() const
{
    return mPassword;
}

void Mc_project_version_updateJob::setVersion_id( qint64 arg0 )
{
    mVersion_id = arg0;
}

qint64 Mc_project_version_updateJob::version_id() const
{
    return mVersion_id;
}

void Mc_project_version_updateJob::setVersion( const TNS__ProjectVersionData& arg0 )
{
    mVersion = arg0;
}

TNS__ProjectVersionData Mc_project_version_updateJob::version() const
{
    return mVersion;
}

void Mc_project_version_updateJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion_id(QString::fromLatin1("version_id"), QVariant::fromValue(mVersion_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueVersion_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion_id);
    KDSoapValue _valueVersion(mVersion.serialize(QString::fromLatin1("version")));
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_version_update"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

bool Mc_project_version_updateJob::return_() const
{
    return mResultReturn;
}

void Mc_project_version_updateJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn = _reply.value().value<bool>();
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_released_versionsJob::Mc_project_get_released_versionsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_released_versionsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_released_versionsJob::username() const
{
    return mUsername;
}

void Mc_project_get_released_versionsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_released_versionsJob::password() const
{
    return mPassword;
}

void Mc_project_get_released_versionsJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_released_versionsJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_released_versionsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_released_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_released_versions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ProjectVersionDataArray Mc_project_get_released_versionsJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_released_versionsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_unreleased_versionsJob::Mc_project_get_unreleased_versionsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_unreleased_versionsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_unreleased_versionsJob::username() const
{
    return mUsername;
}

void Mc_project_get_unreleased_versionsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_unreleased_versionsJob::password() const
{
    return mPassword;
}

void Mc_project_get_unreleased_versionsJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_unreleased_versionsJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_unreleased_versionsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_unreleased_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_unreleased_versions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ProjectVersionDataArray Mc_project_get_unreleased_versionsJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_unreleased_versionsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_attachmentsJob::Mc_project_get_attachmentsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_attachmentsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_attachmentsJob::username() const
{
    return mUsername;
}

void Mc_project_get_attachmentsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_attachmentsJob::password() const
{
    return mPassword;
}

void Mc_project_get_attachmentsJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_attachmentsJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_attachmentsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_attachments");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_attachments"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__ProjectAttachmentDataArray Mc_project_get_attachmentsJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_attachmentsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_custom_fieldsJob::Mc_project_get_custom_fieldsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_custom_fieldsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_custom_fieldsJob::username() const
{
    return mUsername;
}

void Mc_project_get_custom_fieldsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_custom_fieldsJob::password() const
{
    return mPassword;
}

void Mc_project_get_custom_fieldsJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_custom_fieldsJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_custom_fieldsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_custom_fields");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_custom_fields"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__CustomFieldDefinitionDataArray Mc_project_get_custom_fieldsJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_custom_fieldsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_project_get_all_subprojectsJob::Mc_project_get_all_subprojectsJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_project_get_all_subprojectsJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_project_get_all_subprojectsJob::username() const
{
    return mUsername;
}

void Mc_project_get_all_subprojectsJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_project_get_all_subprojectsJob::password() const
{
    return mPassword;
}

void Mc_project_get_all_subprojectsJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_project_get_all_subprojectsJob::project_id() const
{
    return mProject_id;
}

void Mc_project_get_all_subprojectsJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_all_subprojects");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_project_get_all_subprojects"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__StringArray Mc_project_get_all_subprojectsJob::return_() const
{
    return mResultReturn;
}

void Mc_project_get_all_subprojectsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_filter_getJob::Mc_filter_getJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mResultReturn()
{
}

void Mc_filter_getJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_filter_getJob::username() const
{
    return mUsername;
}

void Mc_filter_getJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_filter_getJob::password() const
{
    return mPassword;
}

void Mc_filter_getJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_filter_getJob::project_id() const
{
    return mProject_id;
}

void Mc_filter_getJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_filter_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__FilterDataArray Mc_filter_getJob::return_() const
{
    return mResultReturn;
}

void Mc_filter_getJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_filter_get_issuesJob::Mc_filter_get_issuesJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mFilter_id(), mPage_number(), mPer_page(), mResultReturn()
{
}

void Mc_filter_get_issuesJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_filter_get_issuesJob::username() const
{
    return mUsername;
}

void Mc_filter_get_issuesJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_filter_get_issuesJob::password() const
{
    return mPassword;
}

void Mc_filter_get_issuesJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_filter_get_issuesJob::project_id() const
{
    return mProject_id;
}

void Mc_filter_get_issuesJob::setFilter_id( qint64 arg0 )
{
    mFilter_id = arg0;
}

qint64 Mc_filter_get_issuesJob::filter_id() const
{
    return mFilter_id;
}

void Mc_filter_get_issuesJob::setPage_number( qint64 arg0 )
{
    mPage_number = arg0;
}

qint64 Mc_filter_get_issuesJob::page_number() const
{
    return mPage_number;
}

void Mc_filter_get_issuesJob::setPer_page( qint64 arg0 )
{
    mPer_page = arg0;
}

qint64 Mc_filter_get_issuesJob::per_page() const
{
    return mPer_page;
}

void Mc_filter_get_issuesJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get_issues");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueFilter_id(QString::fromLatin1("filter_id"), QVariant::fromValue(mFilter_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueFilter_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFilter_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(mPage_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(mPer_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_filter_get_issues"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__IssueDataArray Mc_filter_get_issuesJob::return_() const
{
    return mResultReturn;
}

void Mc_filter_get_issuesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


Mc_filter_get_issue_headersJob::Mc_filter_get_issue_headersJob( MantisConnect* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mUsername(), mPassword(), mProject_id(), mFilter_id(), mPage_number(), mPer_page(), mResultReturn()
{
}

void Mc_filter_get_issue_headersJob::setUsername( const QString& arg0 )
{
    mUsername = arg0;
}

QString Mc_filter_get_issue_headersJob::username() const
{
    return mUsername;
}

void Mc_filter_get_issue_headersJob::setPassword( const QString& arg0 )
{
    mPassword = arg0;
}

QString Mc_filter_get_issue_headersJob::password() const
{
    return mPassword;
}

void Mc_filter_get_issue_headersJob::setProject_id( qint64 arg0 )
{
    mProject_id = arg0;
}

qint64 Mc_filter_get_issue_headersJob::project_id() const
{
    return mProject_id;
}

void Mc_filter_get_issue_headersJob::setFilter_id( qint64 arg0 )
{
    mFilter_id = arg0;
}

qint64 Mc_filter_get_issue_headersJob::filter_id() const
{
    return mFilter_id;
}

void Mc_filter_get_issue_headersJob::setPage_number( qint64 arg0 )
{
    mPage_number = arg0;
}

qint64 Mc_filter_get_issue_headersJob::page_number() const
{
    return mPage_number;
}

void Mc_filter_get_issue_headersJob::setPer_page( qint64 arg0 )
{
    mPer_page = arg0;
}

qint64 Mc_filter_get_issue_headersJob::per_page() const
{
    return mPer_page;
}

void Mc_filter_get_issue_headersJob::doStart()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get_issue_headers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(mUsername), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(mPassword), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(mProject_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueFilter_id(QString::fromLatin1("filter_id"), QVariant::fromValue(mFilter_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueFilter_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFilter_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(mPage_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(mPer_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("mc_filter_get_issue_headers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

TNS__IssueHeaderDataArray Mc_filter_get_issue_headersJob::return_() const
{
    return mResultReturn;
}

void Mc_filter_get_issue_headersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {
        if (_reply.childValues().isEmpty()) {
            _reply.setFault(true);
            _reply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
            return;
        }
        _reply = _reply.childValues().at(0);
        mResultReturn.deserialize(_reply);
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class MantisConnect::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

MantisConnect::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


MantisConnect::MantisConnect( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

MantisConnect::~MantisConnect()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void MantisConnect::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void MantisConnect::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void MantisConnect::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString MantisConnect::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *MantisConnect::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php");
        const QString messageNamespace = QString::fromLatin1("http://futureware.biz/mantisconnect");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_1 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *MantisConnect::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const MantisConnect*>( this )->clientInterface() );
}

QString MantisConnect::mc_version()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_version");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_version"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return QString();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return QString();
    }
    QString ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<QString>();
    return ret;
}

void MantisConnect::asyncMc_version()
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_version");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_version"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_versionFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_versionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_versionError(reply);
        Q_EMIT soapError(QLatin1String("mc_version"), reply);
    } else {
        Q_EMIT mc_versionDone( reply.childValues().child(QLatin1String("return")).value().value<QString>() );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_status( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_status"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_status( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_status"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_statusFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_statusFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_statusError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_status"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_statusDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_priorities( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_priorities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_priorities"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_priorities( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_priorities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_priorities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_prioritiesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_prioritiesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_prioritiesError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_priorities"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_prioritiesDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_severities( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_severities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_severities"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_severities( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_severities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_severities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_severitiesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_severitiesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_severitiesError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_severities"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_severitiesDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_reproducibilities( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_reproducibilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_reproducibilities"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_reproducibilities( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_reproducibilities");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_reproducibilities"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_reproducibilitiesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_reproducibilitiesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_reproducibilitiesError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_reproducibilities"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_reproducibilitiesDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_projections( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_projections");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_projections"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_projections( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_projections");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_projections"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_projectionsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_projectionsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_projectionsError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_projections"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_projectionsDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_etas( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_etas");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_etas"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_etas( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_etas");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_etas"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_etasFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_etasFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_etasError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_etas"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_etasDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_resolutions( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_resolutions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_resolutions"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_resolutions( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_resolutions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_resolutions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_resolutionsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_resolutionsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_resolutionsError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_resolutions"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_resolutionsDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_access_levels( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_access_levels");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_access_levels"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_access_levels( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_access_levels");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_access_levels"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_access_levelsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_access_levelsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_access_levelsError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_access_levels"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_access_levelsDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_project_status( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_project_status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_project_status"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_project_status( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_project_status");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_project_status"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_project_statusFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_project_statusFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_project_statusError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_project_status"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_project_statusDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_project_view_states( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_project_view_states");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_project_view_states"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_project_view_states( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_project_view_states");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_project_view_states"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_project_view_statesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_project_view_statesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_project_view_statesError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_project_view_states"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_project_view_statesDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_view_states( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_view_states");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_view_states"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_view_states( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_view_states");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_view_states"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_view_statesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_view_statesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_view_statesError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_view_states"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_view_statesDone( ret );
    }
    watcher->deleteLater();
}

TNS__ObjectRefArray MantisConnect::mc_enum_custom_field_types( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_custom_field_types");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_custom_field_types"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ObjectRefArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ObjectRefArray();
    }
    TNS__ObjectRefArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_enum_custom_field_types( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_custom_field_types");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_custom_field_types"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_custom_field_typesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_custom_field_typesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_custom_field_typesError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_custom_field_types"), reply);
    } else {
        TNS__ObjectRefArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_enum_custom_field_typesDone( ret );
    }
    watcher->deleteLater();
}

QString MantisConnect::mc_enum_get( const QString& username, const QString& password, const QString& enumeration )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueEnumeration(QString::fromLatin1("enumeration"), QVariant::fromValue(enumeration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueEnumeration.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueEnumeration);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_enum_get"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return QString();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return QString();
    }
    QString ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<QString>();
    return ret;
}

void MantisConnect::asyncMc_enum_get( const QString& username, const QString& password, const QString& enumeration )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_enum_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueEnumeration(QString::fromLatin1("enumeration"), QVariant::fromValue(enumeration), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueEnumeration.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueEnumeration);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_enum_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_enum_getFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_enum_getFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_enum_getError(reply);
        Q_EMIT soapError(QLatin1String("mc_enum_get"), reply);
    } else {
        Q_EMIT mc_enum_getDone( reply.childValues().child(QLatin1String("return")).value().value<QString>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_exists( const QString& username, const QString& password, qint64 issue_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_exists");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_exists"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_exists( const QString& username, const QString& password, qint64 issue_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_exists");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_exists"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_existsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_existsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_existsError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_exists"), reply);
    } else {
        Q_EMIT mc_issue_existsDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

TNS__IssueData MantisConnect::mc_issue_get( const QString& username, const QString& password, qint64 issue_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_get"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__IssueData();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__IssueData();
    }
    TNS__IssueData ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_issue_get( const QString& username, const QString& password, qint64 issue_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_getFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_getFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_getError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_get"), reply);
    } else {
        TNS__IssueData ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_issue_getDone( ret );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_issue_get_biggest_id( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get_biggest_id");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_get_biggest_id"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_issue_get_biggest_id( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get_biggest_id");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_get_biggest_id"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_get_biggest_idFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_get_biggest_idFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_get_biggest_idError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_get_biggest_id"), reply);
    } else {
        Q_EMIT mc_issue_get_biggest_idDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_issue_get_id_from_summary( const QString& username, const QString& password, const QString& summary )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get_id_from_summary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueSummary(QString::fromLatin1("summary"), QVariant::fromValue(summary), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueSummary.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueSummary);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_get_id_from_summary"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_issue_get_id_from_summary( const QString& username, const QString& password, const QString& summary )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_get_id_from_summary");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueSummary(QString::fromLatin1("summary"), QVariant::fromValue(summary), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueSummary.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueSummary);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_get_id_from_summary"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_get_id_from_summaryFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_get_id_from_summaryFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_get_id_from_summaryError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_get_id_from_summary"), reply);
    } else {
        Q_EMIT mc_issue_get_id_from_summaryDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_issue_add( const QString& username, const QString& password, const TNS__IssueData& issue )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue(issue.serialize(QString::fromLatin1("issue")));
    _valueIssue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_issue_add( const QString& username, const QString& password, const TNS__IssueData& issue )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue(issue.serialize(QString::fromLatin1("issue")));
    _valueIssue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_add"), reply);
    } else {
        Q_EMIT mc_issue_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_update( const QString& username, const QString& password, qint64 issueId, const TNS__IssueData& issue )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssueId(QString::fromLatin1("issueId"), QVariant::fromValue(issueId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssueId);
    KDSoapValue _valueIssue(issue.serialize(QString::fromLatin1("issue")));
    _valueIssue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_update"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_update( const QString& username, const QString& password, qint64 issueId, const TNS__IssueData& issue )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssueId(QString::fromLatin1("issueId"), QVariant::fromValue(issueId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssueId.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssueId);
    KDSoapValue _valueIssue(issue.serialize(QString::fromLatin1("issue")));
    _valueIssue.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_update"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_updateFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_updateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_updateError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_update"), reply);
    } else {
        Q_EMIT mc_issue_updateDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_delete( const QString& username, const QString& password, qint64 issue_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_delete( const QString& username, const QString& password, qint64 issue_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_delete"), reply);
    } else {
        Q_EMIT mc_issue_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_issue_note_add( const QString& username, const QString& password, qint64 issue_id, const TNS__IssueNoteData& note )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_note_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueNote(note.serialize(QString::fromLatin1("note")));
    _valueNote.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueNote);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_note_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_issue_note_add( const QString& username, const QString& password, qint64 issue_id, const TNS__IssueNoteData& note )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_note_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueNote(note.serialize(QString::fromLatin1("note")));
    _valueNote.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueNote);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_note_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_note_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_note_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_note_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_note_add"), reply);
    } else {
        Q_EMIT mc_issue_note_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_note_delete( const QString& username, const QString& password, qint64 issue_note_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_note_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_note_id(QString::fromLatin1("issue_note_id"), QVariant::fromValue(issue_note_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_note_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_note_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_note_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_note_delete( const QString& username, const QString& password, qint64 issue_note_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_note_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_note_id(QString::fromLatin1("issue_note_id"), QVariant::fromValue(issue_note_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_note_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_note_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_note_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_note_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_note_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_note_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_note_delete"), reply);
    } else {
        Q_EMIT mc_issue_note_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_issue_relationship_add( const QString& username, const QString& password, qint64 issue_id, const TNS__RelationshipData& relationship )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_relationship_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueRelationship(relationship.serialize(QString::fromLatin1("relationship")));
    _valueRelationship.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueRelationship);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_relationship_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_issue_relationship_add( const QString& username, const QString& password, qint64 issue_id, const TNS__RelationshipData& relationship )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_relationship_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueRelationship(relationship.serialize(QString::fromLatin1("relationship")));
    _valueRelationship.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueRelationship);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_relationship_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_relationship_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_relationship_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_relationship_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_relationship_add"), reply);
    } else {
        Q_EMIT mc_issue_relationship_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_relationship_delete( const QString& username, const QString& password, qint64 issue_id, qint64 relationship_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_relationship_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueRelationship_id(QString::fromLatin1("relationship_id"), QVariant::fromValue(relationship_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueRelationship_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueRelationship_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_relationship_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_relationship_delete( const QString& username, const QString& password, qint64 issue_id, qint64 relationship_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_relationship_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueRelationship_id(QString::fromLatin1("relationship_id"), QVariant::fromValue(relationship_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueRelationship_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueRelationship_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_relationship_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_relationship_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_relationship_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_relationship_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_relationship_delete"), reply);
    } else {
        Q_EMIT mc_issue_relationship_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_issue_attachment_add( const QString& username, const QString& password, qint64 issue_id, const QString& name, const QString& file_type, const QByteArray& content )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueName);
    KDSoapValue _valueFile_type(QString::fromLatin1("file_type"), QVariant::fromValue(file_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueFile_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFile_type);
    KDSoapValue _valueContent(QString::fromLatin1("content"), QString::fromLatin1(content.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));
    _valueContent.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueContent);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_attachment_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_issue_attachment_add( const QString& username, const QString& password, qint64 issue_id, const QString& name, const QString& file_type, const QByteArray& content )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueName);
    KDSoapValue _valueFile_type(QString::fromLatin1("file_type"), QVariant::fromValue(file_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueFile_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFile_type);
    KDSoapValue _valueContent(QString::fromLatin1("content"), QString::fromLatin1(content.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));
    _valueContent.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueContent);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_attachment_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_attachment_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_attachment_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_attachment_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_attachment_add"), reply);
    } else {
        Q_EMIT mc_issue_attachment_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_attachment_delete( const QString& username, const QString& password, qint64 issue_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_attachment_id(QString::fromLatin1("issue_attachment_id"), QVariant::fromValue(issue_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_attachment_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_attachment_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_attachment_delete( const QString& username, const QString& password, qint64 issue_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_attachment_id(QString::fromLatin1("issue_attachment_id"), QVariant::fromValue(issue_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_attachment_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_attachment_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_attachment_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_attachment_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_attachment_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_attachment_delete"), reply);
    } else {
        Q_EMIT mc_issue_attachment_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

QByteArray MantisConnect::mc_issue_attachment_get( const QString& username, const QString& password, qint64 issue_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_attachment_id(QString::fromLatin1("issue_attachment_id"), QVariant::fromValue(issue_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_attachment_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_attachment_get"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return QByteArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return QByteArray();
    }
    QByteArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = QByteArray::fromBase64(val.value().toString().toLatin1());
    return ret;
}

void MantisConnect::asyncMc_issue_attachment_get( const QString& username, const QString& password, qint64 issue_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_attachment_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_attachment_id(QString::fromLatin1("issue_attachment_id"), QVariant::fromValue(issue_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_attachment_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_attachment_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_attachment_getFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_attachment_getFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_attachment_getError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_attachment_get"), reply);
    } else {
        Q_EMIT mc_issue_attachment_getDone( reply.childValues().child(QLatin1String("return")).value().value<QByteArray>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_add( const QString& username, const QString& password, const TNS__ProjectData& project )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject(project.serialize(QString::fromLatin1("project")));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_add( const QString& username, const QString& password, const TNS__ProjectData& project )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject(project.serialize(QString::fromLatin1("project")));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_add"), reply);
    } else {
        Q_EMIT mc_project_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_project_delete( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_project_delete( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_delete"), reply);
    } else {
        Q_EMIT mc_project_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_project_update( const QString& username, const QString& password, qint64 project_id, const TNS__ProjectData& project )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueProject(project.serialize(QString::fromLatin1("project")));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_update"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_project_update( const QString& username, const QString& password, qint64 project_id, const TNS__ProjectData& project )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueProject(project.serialize(QString::fromLatin1("project")));
    _valueProject.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_update"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_updateFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_updateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_updateError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_update"), reply);
    } else {
        Q_EMIT mc_project_updateDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_get_id_from_name( const QString& username, const QString& password, const QString& project_name )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_id_from_name");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_name(QString::fromLatin1("project_name"), QVariant::fromValue(project_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueProject_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_name);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_id_from_name"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_get_id_from_name( const QString& username, const QString& password, const QString& project_name )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_id_from_name");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_name(QString::fromLatin1("project_name"), QVariant::fromValue(project_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueProject_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_name);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_id_from_name"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_id_from_nameFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_id_from_nameFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_id_from_nameError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_id_from_name"), reply);
    } else {
        Q_EMIT mc_project_get_id_from_nameDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

TNS__IssueDataArray MantisConnect::mc_project_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_issues");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_issues"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__IssueDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__IssueDataArray();
    }
    TNS__IssueDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_issues");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_issues"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_issuesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_issuesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_issuesError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_issues"), reply);
    } else {
        TNS__IssueDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_issuesDone( ret );
    }
    watcher->deleteLater();
}

TNS__IssueHeaderDataArray MantisConnect::mc_project_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_issue_headers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_issue_headers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__IssueHeaderDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__IssueHeaderDataArray();
    }
    TNS__IssueHeaderDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_issue_headers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_issue_headers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_issue_headersFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_issue_headersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_issue_headersError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_issue_headers"), reply);
    } else {
        TNS__IssueHeaderDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_issue_headersDone( ret );
    }
    watcher->deleteLater();
}

TNS__AccountDataArray MantisConnect::mc_project_get_users( const QString& username, const QString& password, qint64 project_id, qint64 access )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_users");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueAccess(QString::fromLatin1("access"), QVariant::fromValue(access), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueAccess.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueAccess);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_users"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__AccountDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__AccountDataArray();
    }
    TNS__AccountDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_users( const QString& username, const QString& password, qint64 project_id, qint64 access )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_users");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueAccess(QString::fromLatin1("access"), QVariant::fromValue(access), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueAccess.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueAccess);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_users"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_usersFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_usersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_usersError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_users"), reply);
    } else {
        TNS__AccountDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_usersDone( ret );
    }
    watcher->deleteLater();
}

TNS__ProjectDataArray MantisConnect::mc_projects_get_user_accessible( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_projects_get_user_accessible");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_projects_get_user_accessible"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ProjectDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ProjectDataArray();
    }
    TNS__ProjectDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_projects_get_user_accessible( const QString& username, const QString& password )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_projects_get_user_accessible");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_projects_get_user_accessible"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_projects_get_user_accessibleFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_projects_get_user_accessibleFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_projects_get_user_accessibleError(reply);
        Q_EMIT soapError(QLatin1String("mc_projects_get_user_accessible"), reply);
    } else {
        TNS__ProjectDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_projects_get_user_accessibleDone( ret );
    }
    watcher->deleteLater();
}

TNS__StringArray MantisConnect::mc_project_get_categories( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_categories");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_categories"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__StringArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__StringArray();
    }
    TNS__StringArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_categories( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_categories");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_categories"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_categoriesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_categoriesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_categoriesError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_categories"), reply);
    } else {
        TNS__StringArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_categoriesDone( ret );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_add_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_add_category");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(p_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_add_category"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_add_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_add_category");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(p_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_add_category"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_add_categoryFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_add_categoryFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_add_categoryError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_add_category"), reply);
    } else {
        Q_EMIT mc_project_add_categoryDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_delete_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_delete_category");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(p_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_delete_category"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_delete_category( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_delete_category");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(p_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_delete_category"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_delete_categoryFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_delete_categoryFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_delete_categoryError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_delete_category"), reply);
    } else {
        Q_EMIT mc_project_delete_categoryDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_rename_category_by_name( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name, const QString& p_category_name_new, qint64 p_assigned_to )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_rename_category_by_name");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(p_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapValue _valueP_category_name_new(QString::fromLatin1("p_category_name_new"), QVariant::fromValue(p_category_name_new), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name_new.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name_new);
    KDSoapValue _valueP_assigned_to(QString::fromLatin1("p_assigned_to"), QVariant::fromValue(p_assigned_to), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueP_assigned_to.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_assigned_to);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_rename_category_by_name"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_rename_category_by_name( const QString& username, const QString& password, qint64 project_id, const QString& p_category_name, const QString& p_category_name_new, qint64 p_assigned_to )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_rename_category_by_name");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueP_category_name(QString::fromLatin1("p_category_name"), QVariant::fromValue(p_category_name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name);
    KDSoapValue _valueP_category_name_new(QString::fromLatin1("p_category_name_new"), QVariant::fromValue(p_category_name_new), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueP_category_name_new.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_category_name_new);
    KDSoapValue _valueP_assigned_to(QString::fromLatin1("p_assigned_to"), QVariant::fromValue(p_assigned_to), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueP_assigned_to.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueP_assigned_to);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_rename_category_by_name"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_rename_category_by_nameFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_rename_category_by_nameFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_rename_category_by_nameError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_rename_category_by_name"), reply);
    } else {
        Q_EMIT mc_project_rename_category_by_nameDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

TNS__ProjectVersionDataArray MantisConnect::mc_project_get_versions( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_versions"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ProjectVersionDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ProjectVersionDataArray();
    }
    TNS__ProjectVersionDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_versions( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_versions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_versionsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_versionsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_versionsError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_versions"), reply);
    } else {
        TNS__ProjectVersionDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_versionsDone( ret );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_version_add( const QString& username, const QString& password, const TNS__ProjectVersionData& version )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion(version.serialize(QString::fromLatin1("version")));
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_version_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_version_add( const QString& username, const QString& password, const TNS__ProjectVersionData& version )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion(version.serialize(QString::fromLatin1("version")));
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_version_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_version_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_version_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_version_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_version_add"), reply);
    } else {
        Q_EMIT mc_project_version_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_project_version_update( const QString& username, const QString& password, qint64 version_id, const TNS__ProjectVersionData& version )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion_id(QString::fromLatin1("version_id"), QVariant::fromValue(version_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueVersion_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion_id);
    KDSoapValue _valueVersion(version.serialize(QString::fromLatin1("version")));
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_version_update"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_project_version_update( const QString& username, const QString& password, qint64 version_id, const TNS__ProjectVersionData& version )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_update");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion_id(QString::fromLatin1("version_id"), QVariant::fromValue(version_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueVersion_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion_id);
    KDSoapValue _valueVersion(version.serialize(QString::fromLatin1("version")));
    _valueVersion.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_version_update"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_version_updateFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_version_updateFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_version_updateError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_version_update"), reply);
    } else {
        Q_EMIT mc_project_version_updateDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_project_version_delete( const QString& username, const QString& password, qint64 version_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion_id(QString::fromLatin1("version_id"), QVariant::fromValue(version_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueVersion_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_version_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_project_version_delete( const QString& username, const QString& password, qint64 version_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_version_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueVersion_id(QString::fromLatin1("version_id"), QVariant::fromValue(version_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueVersion_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueVersion_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_version_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_version_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_version_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_version_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_version_delete"), reply);
    } else {
        Q_EMIT mc_project_version_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

TNS__ProjectVersionDataArray MantisConnect::mc_project_get_released_versions( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_released_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_released_versions"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ProjectVersionDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ProjectVersionDataArray();
    }
    TNS__ProjectVersionDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_released_versions( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_released_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_released_versions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_released_versionsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_released_versionsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_released_versionsError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_released_versions"), reply);
    } else {
        TNS__ProjectVersionDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_released_versionsDone( ret );
    }
    watcher->deleteLater();
}

TNS__ProjectVersionDataArray MantisConnect::mc_project_get_unreleased_versions( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_unreleased_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_unreleased_versions"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ProjectVersionDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ProjectVersionDataArray();
    }
    TNS__ProjectVersionDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_unreleased_versions( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_unreleased_versions");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_unreleased_versions"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_unreleased_versionsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_unreleased_versionsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_unreleased_versionsError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_unreleased_versions"), reply);
    } else {
        TNS__ProjectVersionDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_unreleased_versionsDone( ret );
    }
    watcher->deleteLater();
}

TNS__ProjectAttachmentDataArray MantisConnect::mc_project_get_attachments( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_attachments");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_attachments"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__ProjectAttachmentDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__ProjectAttachmentDataArray();
    }
    TNS__ProjectAttachmentDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_attachments( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_attachments");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_attachments"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_attachmentsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_attachmentsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_attachmentsError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_attachments"), reply);
    } else {
        TNS__ProjectAttachmentDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_attachmentsDone( ret );
    }
    watcher->deleteLater();
}

TNS__CustomFieldDefinitionDataArray MantisConnect::mc_project_get_custom_fields( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_custom_fields");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_custom_fields"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__CustomFieldDefinitionDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__CustomFieldDefinitionDataArray();
    }
    TNS__CustomFieldDefinitionDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_custom_fields( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_custom_fields");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_custom_fields"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_custom_fieldsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_custom_fieldsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_custom_fieldsError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_custom_fields"), reply);
    } else {
        TNS__CustomFieldDefinitionDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_custom_fieldsDone( ret );
    }
    watcher->deleteLater();
}

QByteArray MantisConnect::mc_project_attachment_get( const QString& username, const QString& password, qint64 project_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_attachment_id(QString::fromLatin1("project_attachment_id"), QVariant::fromValue(project_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_attachment_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_attachment_get"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return QByteArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return QByteArray();
    }
    QByteArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = QByteArray::fromBase64(val.value().toString().toLatin1());
    return ret;
}

void MantisConnect::asyncMc_project_attachment_get( const QString& username, const QString& password, qint64 project_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_attachment_id(QString::fromLatin1("project_attachment_id"), QVariant::fromValue(project_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_attachment_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_attachment_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_attachment_getFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_attachment_getFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_attachment_getError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_attachment_get"), reply);
    } else {
        Q_EMIT mc_project_attachment_getDone( reply.childValues().child(QLatin1String("return")).value().value<QByteArray>() );
    }
    watcher->deleteLater();
}

qint64 MantisConnect::mc_project_attachment_add( const QString& username, const QString& password, qint64 project_id, const QString& name, const QString& title, const QString& description, const QString& file_type, const QByteArray& content )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueName);
    KDSoapValue _valueTitle(QString::fromLatin1("title"), QVariant::fromValue(title), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueTitle.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueTitle);
    KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(description), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueDescription);
    KDSoapValue _valueFile_type(QString::fromLatin1("file_type"), QVariant::fromValue(file_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueFile_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFile_type);
    KDSoapValue _valueContent(QString::fromLatin1("content"), QString::fromLatin1(content.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));
    _valueContent.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueContent);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_attachment_add"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return qint64();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return qint64();
    }
    qint64 ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<qint64>();
    return ret;
}

void MantisConnect::asyncMc_project_attachment_add( const QString& username, const QString& password, qint64 project_id, const QString& name, const QString& title, const QString& description, const QString& file_type, const QByteArray& content )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_add");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueName(QString::fromLatin1("name"), QVariant::fromValue(name), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueName.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueName);
    KDSoapValue _valueTitle(QString::fromLatin1("title"), QVariant::fromValue(title), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueTitle.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueTitle);
    KDSoapValue _valueDescription(QString::fromLatin1("description"), QVariant::fromValue(description), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueDescription.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueDescription);
    KDSoapValue _valueFile_type(QString::fromLatin1("file_type"), QVariant::fromValue(file_type), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueFile_type.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFile_type);
    KDSoapValue _valueContent(QString::fromLatin1("content"), QString::fromLatin1(content.toBase64().constData()), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("base64Binary"));
    _valueContent.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueContent);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_attachment_add"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_attachment_addFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_attachment_addFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_attachment_addError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_attachment_add"), reply);
    } else {
        Q_EMIT mc_project_attachment_addDone( reply.childValues().child(QLatin1String("return")).value().value<qint64>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_project_attachment_delete( const QString& username, const QString& password, qint64 project_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_attachment_id(QString::fromLatin1("project_attachment_id"), QVariant::fromValue(project_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_attachment_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_attachment_delete"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_project_attachment_delete( const QString& username, const QString& password, qint64 project_attachment_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_attachment_delete");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_attachment_id(QString::fromLatin1("project_attachment_id"), QVariant::fromValue(project_attachment_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_attachment_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_attachment_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_attachment_delete"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_attachment_deleteFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_attachment_deleteFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_attachment_deleteError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_attachment_delete"), reply);
    } else {
        Q_EMIT mc_project_attachment_deleteDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}

TNS__StringArray MantisConnect::mc_project_get_all_subprojects( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_all_subprojects");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_project_get_all_subprojects"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__StringArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__StringArray();
    }
    TNS__StringArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_project_get_all_subprojects( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_project_get_all_subprojects");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_project_get_all_subprojects"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_project_get_all_subprojectsFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_project_get_all_subprojectsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_project_get_all_subprojectsError(reply);
        Q_EMIT soapError(QLatin1String("mc_project_get_all_subprojects"), reply);
    } else {
        TNS__StringArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_project_get_all_subprojectsDone( ret );
    }
    watcher->deleteLater();
}

TNS__FilterDataArray MantisConnect::mc_filter_get( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_filter_get"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__FilterDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__FilterDataArray();
    }
    TNS__FilterDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_filter_get( const QString& username, const QString& password, qint64 project_id )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_filter_get"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_filter_getFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_filter_getFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_filter_getError(reply);
        Q_EMIT soapError(QLatin1String("mc_filter_get"), reply);
    } else {
        TNS__FilterDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_filter_getDone( ret );
    }
    watcher->deleteLater();
}

TNS__IssueDataArray MantisConnect::mc_filter_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get_issues");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueFilter_id(QString::fromLatin1("filter_id"), QVariant::fromValue(filter_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueFilter_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFilter_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_filter_get_issues"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__IssueDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__IssueDataArray();
    }
    TNS__IssueDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_filter_get_issues( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get_issues");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueFilter_id(QString::fromLatin1("filter_id"), QVariant::fromValue(filter_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueFilter_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFilter_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_filter_get_issues"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_filter_get_issuesFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_filter_get_issuesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_filter_get_issuesError(reply);
        Q_EMIT soapError(QLatin1String("mc_filter_get_issues"), reply);
    } else {
        TNS__IssueDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_filter_get_issuesDone( ret );
    }
    watcher->deleteLater();
}

TNS__IssueHeaderDataArray MantisConnect::mc_filter_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get_issue_headers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueFilter_id(QString::fromLatin1("filter_id"), QVariant::fromValue(filter_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueFilter_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFilter_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_filter_get_issue_headers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return TNS__IssueHeaderDataArray();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return TNS__IssueHeaderDataArray();
    }
    TNS__IssueHeaderDataArray ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret.deserialize(val);
    return ret;
}

void MantisConnect::asyncMc_filter_get_issue_headers( const QString& username, const QString& password, qint64 project_id, qint64 filter_id, qint64 page_number, qint64 per_page )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_filter_get_issue_headers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueProject_id(QString::fromLatin1("project_id"), QVariant::fromValue(project_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueProject_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueProject_id);
    KDSoapValue _valueFilter_id(QString::fromLatin1("filter_id"), QVariant::fromValue(filter_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueFilter_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFilter_id);
    KDSoapValue _valuePage_number(QString::fromLatin1("page_number"), QVariant::fromValue(page_number), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePage_number.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePage_number);
    KDSoapValue _valuePer_page(QString::fromLatin1("per_page"), QVariant::fromValue(per_page), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valuePer_page.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePer_page);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_filter_get_issue_headers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_filter_get_issue_headersFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_filter_get_issue_headersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_filter_get_issue_headersError(reply);
        Q_EMIT soapError(QLatin1String("mc_filter_get_issue_headers"), reply);
    } else {
        TNS__IssueHeaderDataArray ret;
        ret.deserialize(reply.childValues().child(QLatin1String("return")));
        Q_EMIT mc_filter_get_issue_headersDone( ret );
    }
    watcher->deleteLater();
}

QString MantisConnect::mc_config_get_string( const QString& username, const QString& password, const QString& config_var )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_config_get_string");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueConfig_var(QString::fromLatin1("config_var"), QVariant::fromValue(config_var), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueConfig_var.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueConfig_var);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_config_get_string"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return QString();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return QString();
    }
    QString ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<QString>();
    return ret;
}

void MantisConnect::asyncMc_config_get_string( const QString& username, const QString& password, const QString& config_var )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_config_get_string");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueConfig_var(QString::fromLatin1("config_var"), QVariant::fromValue(config_var), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueConfig_var.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueConfig_var);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_config_get_string"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_config_get_stringFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_config_get_stringFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_config_get_stringError(reply);
        Q_EMIT soapError(QLatin1String("mc_config_get_string"), reply);
    } else {
        Q_EMIT mc_config_get_stringDone( reply.childValues().child(QLatin1String("return")).value().value<QString>() );
    }
    watcher->deleteLater();
}

bool MantisConnect::mc_issue_checkin( const QString& username, const QString& password, qint64 issue_id, const QString& comment, bool fixed )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_checkin");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueComment(QString::fromLatin1("comment"), QVariant::fromValue(comment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueComment.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueComment);
    KDSoapValue _valueFixed(QString::fromLatin1("fixed"), QVariant::fromValue(fixed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
    _valueFixed.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFixed);
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("mc_issue_checkin"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return bool();
    if (d_ptr->m_lastReply.childValues().isEmpty()) {
        d_ptr->m_lastReply.setFault(true);
        d_ptr->m_lastReply.addArgument(QString::fromLatin1("faultcode"), QString::fromLatin1("Server.EmptyResponse"));
        return bool();
    }
    bool ret;
    const KDSoapValue val = d_ptr->m_lastReply.childValues().at(0);
    ret = val.value().value<bool>();
    return ret;
}

void MantisConnect::asyncMc_issue_checkin( const QString& username, const QString& password, qint64 issue_id, const QString& comment, bool fixed )
{
    const QString action = QString::fromLatin1("http://mantis.rha.astek.fr/api/soap/mantisconnect.php/mc_issue_checkin");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::EncodedUse);
    KDSoapValue _valueUsername(QString::fromLatin1("username"), QVariant::fromValue(username), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueUsername.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueUsername);
    KDSoapValue _valuePassword(QString::fromLatin1("password"), QVariant::fromValue(password), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valuePassword.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valuePassword);
    KDSoapValue _valueIssue_id(QString::fromLatin1("issue_id"), QVariant::fromValue(issue_id), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("integer"));
    _valueIssue_id.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueIssue_id);
    KDSoapValue _valueComment(QString::fromLatin1("comment"), QVariant::fromValue(comment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));
    _valueComment.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueComment);
    KDSoapValue _valueFixed(QString::fromLatin1("fixed"), QVariant::fromValue(fixed), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));
    _valueFixed.setNamespaceUri(QString::fromLatin1("http://futureware.biz/mantisconnect"));
    message.childValues().append(_valueFixed);
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("mc_issue_checkin"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotMc_issue_checkinFinished(KDSoapPendingCallWatcher*)));
}

void MantisConnect::_kd_slotMc_issue_checkinFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT mc_issue_checkinError(reply);
        Q_EMIT soapError(QLatin1String("mc_issue_checkin"), reply);
    } else {
        Q_EMIT mc_issue_checkinDone( reply.childValues().child(QLatin1String("return")).value().value<bool>() );
    }
    watcher->deleteLater();
}


